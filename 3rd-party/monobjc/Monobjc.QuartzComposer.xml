<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/laurent/Projects/Mercurial/Monobjc/dist/2.0/Monobjc.QuartzComposer</name>
    </assembly>
    <members>
        <member name="T:Monobjc.QuartzComposer.Properties.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.Properties.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.Properties.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeNameKey">
            <summary>
            The key for the composition name. The associated value is an NSString object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeDescriptionKey">
            <summary>
            he key for the composition description. The associated value is an NSString object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeCopyrightKey">
            <summary>
            The key for composition copyright information. The associated value is an NSString object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeBuiltInKey">
            <summary>
            The key for the composition origin. The associated value is an NSNumber object that contains a Boolean value. TRUE indicates the composition is built-in (provided by Mac OS X).
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeIsTimeDependentKey">
            <summary>
            The key for the composition time dependency. The associated value is an NSNumber object that contains a Boolean value. TRUE indicates that the composition is time dependent.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeHasConsumersKey">
            <summary>
            The key for a composition that has consumer patches. The associated value is an NSNumber object that contains a Boolean value. TRUE indicates that the composition has consumers.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionAttributeCategoryKey">
            <summary>
            The composition category. The associated value is a category constant. See “Composition Categories.”
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionCategoryDistortion">
            <summary>
            A composition that produces a distortion effect.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionCategoryStylize">
            <summary>
            A composition that produces a stylize effect.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionCategoryUtility">
            <summary>
            A utility composition.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputImageKey">
            <summary>
            An image input port whose key is inputImage.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputSourceImageKey">
            <summary>
            An image input port whose key is inputSourceImage.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputDestinationImageKey">
            <summary>
            An image input port whose key is inputDestinationImage.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputRSSFeedURLKey">
            <summary>
            A string input port whose key is inputRSSFeedURL. This port must be passed an http or feed scheme URL.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputRSSArticleDurationKey">
            <summary>
            A number input port whose key is inputRSSArticleDuration. The value must be expressed in seconds.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputPreviewModeKey">
            <summary>
            A Boolean input port whose key is inputPreviewMode. When the value of this input port is set to , the composition that provides this port must be able to run in a low-quality mode that produces a preview of the composition.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputXKey">
            <summary>
            A number input port whose key is inputX. The value must be normalized to the image width with the origin on the left.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputYKey">
            <summary>
            A number input port whose key is inputY. The value must be normalized to the image height with the origin at the bottom.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputScreenImageKey">
            <summary>
            An image input port whose key is inputScreenImage.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputAudioPeakKey">
            <summary>
            A number input port whose key is inputAudioPeak. The value must be in the [0,1] range as a mono signal with no decay applied.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputAudioSpectrumKey">
            <summary>
            A structure input port whose key is inputAudioSpectrum. The structure must contain 16 values in the [0,1] range representing 16 spectrum bands of the mono signal from low to high frequencies with no decay applied.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputTrackPositionKey">
            <summary>
            A number input port whose key is inputTrackPosition. The value must be expressed in seconds.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputTrackSignalKey">
            <summary>
            A structure input port whose key is inputTrackInfo. The structure contains optional entries, such as “name”, “artist”, "album", "duration", "artwork", and so on.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputPrimaryColorKey">
            <summary>
            A Boolean input port whose key is inputTrackSignal.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputSecondaryColorKey">
            <summary>
            A color input port whose key is inputPrimaryColor.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionInputPaceKey">
            <summary>
            A number input port whose key is inputPace. The value must be in the [0,1] range.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionOutputImageKey">
            <summary>
            An image output port whose key is outputImage.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionOutputWebPageURLKey">
            <summary>
            A string output port whose key is outputWebPageURL.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolGraphicAnimation">
            <summary>
            A composition that renders a generic graphical animation. It has the option to use QCCompositionInputPrimaryColorKey for the primary color of the animation, QCCompositionInputSecondaryColorKey for the secondary color of the animation, QCCompositionInputPaceKey for the global pace of the animation, and QCCompositionInputPreviewModeKey to indicate if the animation should run in lower-quality for preview purposes.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolGraphicTransition">
            <summary>
            A composition that performs a transition between two images, using a transition time in range of 0 to 1. A conforming composition must use the input keys QCCompositionInputSourceImageKey for the starting image and QCCompositionInputDestinationImageKey for the image to transition to. The composition can optionally use QCCompositionInputPreviewModeKey to indicate if the animation should run in lower-quality for preview purposes.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolImageFilter">
            <summary>
            A composition that applies an effect to a source image. A conforming composition must use the input key QCCompositionInputImageKey for the source image and QCCompositionOutputImageKey for the output image. The composition can optionally use QCCompositionInputXKey to specify the X position of the center point of the effect, QCCompositionInputYKey to specify the Y position of the center point of the effect, andQCCompositionInputPreviewModeKey to indicate if the animation should run in lower-quality for preview purposes.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolScreenSaver">
            <summary>
            A composition that can be used as a screen saver. The composition has the option to use QCCompositionInputScreenImageKey for a screenshot image of the screen that the screen saver runs on, QCCompositionInputPreviewModeKey to indicate if the animation should run in lower-quality for preview purposes, and QCCompositionOutputWebPageURLKey for a URL to open in the default web browser when screen saver exits (only allowed if screen saver password is disabled).
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolRSSVisualizer">
            <summary>
            A composition that acts as a visualizer for an RSS feed. A conforming composition must use the input key QCCompositionInputRSSFeedURLKey for the URL to use for the RSS feed. It can optionally use QCCompositionInputRSSArticleDurationKey to specify the duration of each feed article.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCComposition.QCCompositionProtocolMusicVisualizer">
            <summary>
            A composition that acts as a visualizer for music. A conforming composition must use the input key QCCompositionInputAudioPeakKey for the instantaneous audio peak and the QCCompositionInputAudioSpectrumKey for the instantaneous audio spectrum. It can optionally use the QCCompositionInputTrackInfoKey to indicate it receives information about the current track and the QCCompositionInputTrackSignalKey to indicate the start of a new track.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCComposition.Attributes">
            <summary>
            Returns the attributes of the composition
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCComposition.Protocols">
            <summary>
            Returns the list of protocols to which the composition conforms.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCComposition.InputKeys">
            <summary>
            Returns an array listing the keys that identify the input ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCComposition.OutputKeys">
            <summary>
            Returns an array listing the keys that identify the output ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCComposition.Identifier">
            <summary>
            Returns the unique and persistent identifier for the composition from the composition repository.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCComposition.CompositionWithFile(Monobjc.Cocoa.NSString)">
            <summary>
            Returns an autoreleased composition object initialized with a Quartz Composer composition file.
            </summary>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /></param>
            <returns>
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCComposition.CompositionWithData(Monobjc.Cocoa.NSData)">
            <summary>
            Returns an autoreleased composition object initialized with the contents of a Quartz Composer composition file.
            </summary>
            <param name="data">
            A <see cref="T:Monobjc.Cocoa.NSData" /></param>
            <returns>
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCComposition.CopyWithZone(System.IntPtr)">
            <summary>
            Returns a new instance that’s a copy of the receiver. (required)
            </summary>
            <param name="zone">
            The zone identifies an area of memory from which to allocate for the new instance. If zone is NULL, the new instance is allocated from the default zone, which is returned from the function NSDefaultMallocZone.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.#ctor(Monobjc.Cocoa.NSString)">
            <summary>
            Initializes and returns a composition layer using the Quartz Composer composition in the specified file.
            </summary>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /> that specifies the location of a Quartz Composer composition.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.#ctor(Monobjc.QuartzComposer.QCComposition)">
            <summary>
            Initializes and returns a composition layer using the provided Quartz Composer composition.
            </summary>
            <param name="composition">
            The Quartz Composer <see cref="T:Monobjc.QuartzComposer.QCComposition" /> composition to use as content.
            </param>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.Composition">
            <summary>
            Returns the composition associated with the layer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.Attributes">
            <summary>
            Returns the attributes of the composition associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.InputKeys">
            <summary>
            Returns an array that contains the keys that identify the input ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.OutputKeys">
            <summary>
            Returns an array that contains the keys that identify the output ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.PropertyListFromInputValues">
            <summary>
            Returns a property list object that represents the current values for all the input keys of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionLayer.UserInfo">
            <summary>
            Returns a mutable dictionary for storing arbitrary information.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.CompositionLayerWithFile(Monobjc.Cocoa.NSString)">
            <summary>
            Creates and returns an instance of a composition layer using the Quartz Composer composition in the specified file.
            </summary>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /> that specifies the location of a Quartz Composer composition.
            </param>
            <returns>
            A  autoreleased, initialized <see cref="T:Monobjc.QuartzComposer.QCCompositionLayer" /> object or nil if initialization is not successful.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.CompositionLayerWithComposition(Monobjc.QuartzComposer.QCComposition)">
            <summary>
            Creates and returns an instance of a composition layer using the provided Quartz Composer composition.
            </summary>
            <param name="composition">
            The Quartz Composer <see cref="T:Monobjc.QuartzComposer.QCComposition" /> composition to use as content.
            </param>
            <returns>
            An autoreleased, initialized <see cref="T:Monobjc.QuartzComposer.QCCompositionLayer" /> object or nil if initialization is not successful.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.SetValueForInputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.ValueForInputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.ValueForOutputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an output port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.ValueForOutputKeyOfType(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current value on an output port (identified by its key) of the root patch of the composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionLayer.SetInputValuesWithPropertyList(Monobjc.Id)">
            <summary>
            Sets the values for the input keys of the composition from a previously saved property list.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionParameterView.QCCompositionParameterViewEventDispatcher.CompositionParameterViewShouldDisplayParameterWithKeyAttributes(Monobjc.QuartzComposer.QCCompositionParameterView,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Allows you to define which composition parameters are visible in the user interface when the composition parameter view refreshes.
            </summary>
            <param name="parameterView">
            The <see cref="T:Monobjc.QuartzComposer.QCCompositionParameterView" /> in which the selection changed.
            </param>
            <param name="portKey">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key for one of the composition parameters, which is provided to you by the Quartz Composer engine.
            </param>
            <param name="portAttributes">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> of the attributes that you want to display in the user interface.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. True if port attributes should be displayed; False otherwise.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionParameterView.QCCompositionParameterViewEventDispatcher.CompositionParameterViewDidChangeParameterWithKey(Monobjc.QuartzComposer.QCCompositionParameterView,Monobjc.Cocoa.NSString)">
            <summary>
            Whenever a composition parameter is edited in the composition parameter view, you'll be notified.
            </summary>
            <param name="parameterView">
            The <see cref="T:Monobjc.QuartzComposer.QCCompositionParameterView" /> in which the parameter has changed
            </param>
            <param name="portKey">
            The <see cref="T:Monobjc.Cocoa.NSString" /> key for one of the composition parameters, which has been modified.
            </param>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionParameterView.CompositionRenderer">
            <summary>
            Gets or sets the composition parameter view for editing the input parameters of the provided renderer object.
            A QCCompositionRenderer object, either QCView, QCRenderer, or QCCompositionLayer. Pass nil to unset this renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionParameterView.HasParameters">
            <summary>
            Checks whether the composition that is currently edited by the composition parameter view has any input parameters.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionParameterView.BackgroundColor">
            <summary>
            Gets or sets the background color of the composition parameter view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionParameterView.DrawsBackground">
            <summary>
            Gets or sets whether the composition parameter view draws its background.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionParameterView.Delegate">
            <summary>
            Gets or sets the composition parameter view delegate.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCCompositionPickerPanel.QCCompositionPickerPanelDidSelectCompositionNotification">
            <summary>
            Posted when the user chooses a composition.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerPanel.SharedCompositionPickerPanel">
            <summary>
            Returns the shared instance of the composition picker panel.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerPanel.CompositionPickerView">
            <summary>
            Returns the composition picker view used by the panel so that it can be configured.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCCompositionPickerView.QCCompositionPickerViewDidSelectCompositionNotification">
            <summary>
            Posted when the user selects a composition in the picker view.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.Compositions">
            <summary>
            Returns the list of compositions that are currently in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.Delegate">
            <summary>
            Gets or sets the composition picker view delegate
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.ShowsCompositionNames">
            <summary>
            Enables or disables the display of composition names in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.AllowsEmptySelection">
            <summary>
            Gets or sets whether to allow an empty selection in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.CompositionAspectRatio">
            <summary>
            Gets or sets the aspect ratio used to display compositions in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.SelectedComposition">
            <summary>
            Gets or sets a composition as selected in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.IsAnimating">
            <summary>
            Returns whether or not the composition picker view is currently animating its composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.MaxAnimationFrameRate">
            <summary>
            Gets or sets the maximum frame rate for animating compositions.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.BackgroundColor">
            <summary>
            Gets or sets the background color for the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.DrawsBackground">
            <summary>
            Gets or sets whether the composition picker view draws its background.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.NumberOfColumns">
            <summary>
            Gets or sets the number of columns in the composition picker view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionPickerView.NumberOfRows">
            <summary>
            Gets or sets the number of rows in the composition picker view.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionPickerView.SetCompositionsFromRepositoryWithProtocolAndAttributes(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Sets the compositions in the composition picker view to those that match the specified criteria.
            </summary>
            <param name="protocol">
            A <see cref="T:Monobjc.Cocoa.NSString" /> protocols that you want compositions shown in the picker view to conform to. You can pass any of these protocols: QCCompositionProtocolAnimation, QCCompositionProtocolImageProducer, QCCompositionProtocolImageFilter, QCCompositionProtocolImageCompositor, QCCompositionProtocolImageTransition, and QCCompositionProtocolScreenSaverRSS.
            </param>
            <param name="attributes">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> dictionary that contains the attributes, and their associated values, that you want compositions in the picker view to match. For example, you can pass: QCCompositionAttributeNameKey, QCCompositionAttributeDescriptionKey, QCCompositionAttributeCopyrightKey, QCCompositionAttributeBuiltInKey, and QCCompositionAttributeTimeDependentKey. Pass nil if you don’t want to filter based on the attributes.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionPickerView.SetDefaultValueForInputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the default value to use for a composition input parameter.
            </summary>
            <param name="value">
            A <see cref="T:Monobjc.Id" /> default value overrides any initial value existing for composition input parameters with this key. Pass nil to clear the default value.
            </param>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> input parameter key whose default value you want to set.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionPickerView.ResetDefaultInputValues">
            <summary>
            Clears all previously set default values for composition input parameters.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionPickerView.StartAnimation(Monobjc.Id)">
            <summary>
            Starts animating the composition in the composition picker view.
            </summary>
            <param name="sender">
            The <see cref="T:Monobjc.Id" /> object initiating the animation.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionPickerView.StopAnimation(Monobjc.Id)">
            <summary>
            Stops animating the composition that is currently animating in the composition picker view.
            </summary>
            <param name="sender">
            The <see cref="T:Monobjc.Id" /> object stopping the animation.
            </param>
        </member>
        <member name="T:Monobjc.QuartzComposer.IQCCompositionPickerViewDelegate">
            <summary>
            Managed wrapper for QCCompositionPickerViewDelegate Objective-C protocol.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionPickerViewDelegate.CompositionPickerViewDidSelectComposition(Monobjc.QuartzComposer.QCCompositionPickerView,Monobjc.QuartzComposer.QCComposition)">
            <summary>
                <para>Performs custom tasks when the selected composition in the composition picker view changes.</para>
                <para>Original signature is '- (void) compositionPickerView:(QCCompositionPickerView*)pickerView didSelectComposition:(QCComposition*)composition'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionPickerViewDelegate.CompositionPickerViewDidStartAnimating(Monobjc.QuartzComposer.QCCompositionPickerView)">
            <summary>
                <para>Performs custom tasks when the composition picker view starts animating a composition.</para>
                <para>Original signature is '- (void) compositionPickerViewDidStartAnimating:(QCCompositionPickerView*)pickerView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionPickerViewDelegate.CompositionPickerViewWillStopAnimating(Monobjc.QuartzComposer.QCCompositionPickerView)">
            <summary>
                <para>Performs custom tasks when the composition picker view stops animating a composition.</para>
                <para>Original signature is '(void) compositionPickerViewWillStopAnimating:(QCCompositionPickerView*)pickerView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCCompositionRenderer.Attributes">
            <summary>
            Returns the attributes of the composition associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCCompositionRenderer.InputKeys">
            <summary>
            Returns an array that contains the keys that identify the input ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCCompositionRenderer.OutputKeys">
            <summary>
            Returns an array that contains the keys that identify the output ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCCompositionRenderer.PropertyListFromInputValues">
            <summary>
            Returns a property list object that represents the current values for all the input keys of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCCompositionRenderer.UserInfo">
            <summary>
            Returns a mutable dictionary for storing arbitrary information.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionRenderer.SetValueForInputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the value for an input port of a composition
            </summary>
            <param name="value">
            A <see cref="T:Monobjc.Cocoa.NSObject" /> The value to set for the input port. The input port must be at the root patch of the composition. The data type of the value argument must match the input port. See QCPortAttributeTypeKey for the data types accepted by a particular port type.
            </param>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> he key associated with the input port of the composition. This method throws an exception if key is invalid.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionRenderer.ValueForInputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an input port of a composition.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key associated with an input port for the root patch of a composition. This method throws an exception if key is invalid.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> value. The data type of returned value depends on the type of the input port. See QCPortAttributeTypeKey for more information.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionRenderer.ValueForOutputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an output port of a composition.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key associated with an output port for the root patch of a composition. This method throws an exception if key is invalid.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> The value. The data type of returned value depends on the type of the output port. See QCPortAttributeTypeKey for more information.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionRenderer.ValueForOutputKeyOfType(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current value on an output port (identified by its key) of the root patch of the composition
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> The key associated with an output port for the root patch of a composition. This method throws an exception if key is invalid.
            </param>
            <param name="type">
            A <see cref="T:Monobjc.Cocoa.NSString" /> A string that specifies the class.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> The value.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCCompositionRenderer.SetInputValuesWithPropertyList(Monobjc.Id)">
            <summary>
            Sets the values for the input keys of the composition from a previously saved property list.
            </summary>
            <param name="plist">
            A <see cref="T:Monobjc.Id" /> property list
            </param>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCCompositionRepository.QCCompositionRepositoryDidUpdateNotification">
            <summary>
            Posted whenever the list of compositions in the composition repository is updated.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCCompositionRepository.SharedCompositionRepository">
            <summary>
            Returns the shared instance of the composition repository.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionRepository.CompositionWithIdentifier(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the composition that corresponds to the identifier.
            </summary>
            <param name="identifier">
            A <see cref="T:Monobjc.Cocoa.NSString" /> that uniquely identifies the composition to retrieve.
            </param>
            <returns>
            The <see cref="T:Monobjc.QuartzComposer.QCComposition" /> identified by the provided string, or nil if there is no composition with that identifier in the composition repository.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionRepository.CompositionsWithProtocolsAndAttributes(Monobjc.Cocoa.NSArray,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Returns an array of compositions that match a set of criteria.
            </summary>
            <param name="protocols">
            The <see cref="T:Monobjc.Cocoa.NSArray" /> protocols that you want compositions to conform to. Pass nil if you don’t want to filter based on the protocol. You can pass any of these protocols: QCCompositionProtocolAnimation, QCCompositionProtocolImageProducer, QCCompositionProtocolImageFilter, QCCompositionProtocolImageCompositor, QCCompositionProtocolImageTransition, and QCCompositionProtocolScreenSaverRSS.
            </param>
            <param name="attributes">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> dictionary that contains the attributes, and their associated values, that you want compositions to match. Pass nil if you don’t want to filter based on the attributes. For example, you can pass any of these attributes: QCCompositionAttributeNameKey, QCCompositionAttributeDescriptionKey, QCCompositionAttributeCopyrightKey, QCCompositionAttributeBuiltInKey, and QCCompositionAttributeTimeDependentKey.
            </param>
            <returns>
            An <see cref="T:Monobjc.Cocoa.NSArray" /> array of QCComposition objects that meet the supplied criteria.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCCompositionRepository.AllCompositions">
            <summary>
            Returns an array that contains all compositions currently in the composition repository.
            </summary>
            <returns>
            An <see cref="T:Monobjc.Cocoa.NSArray" /> array of QCComposition objects.
            </returns>
        </member>
        <member name="T:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionMode">
            <summary>
            Execution modes for custom patches.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionMode.kQCPlugInExecutionModeProvider">
            <summary>
            A provider execution mode. The custom patch executes on demand—that is, whenever data is requested of it, but at most once per frame.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionMode.kQCPlugInExecutionModeProcessor">
            <summary>
            A processor execution mode. The custom patch executes whenever its inputs change or if the time change (assuming it's time-dependent).
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionMode.kQCPlugInExecutionModeConsumer">
            <summary>
            A consumer execution mode. The custom patch always executes assuming the value of its Enable input port is true. (The Enable port is automatically added by the system.)
            </summary>
        </member>
        <member name="T:Monobjc.QuartzComposer.QCPlugIn.QCPlugInTimeMode">
            <summary>
            Time modes for custom patches.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInTimeMode.kQCPlugInTimeModeNone">
            <summary>
            No time dependency. The custom patch does not depend on time at all. (It does not use the time parameter of the execute:atTime:withArguments: method.)
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInTimeMode.kQCPlugInTimeModeIdle">
            <summary>
            An idle time dependency. The custom patch does not depend on time but needs the system to execute it periodically. For example if the custom patch connects to a piece of hardware, to ensure that it pulls data from the hardware, you would set the custom patch time dependency to idle time mode. This time mode is typically used with providers.]]
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInTimeMode.kQCPlugInTimeModeTimeBase">
            <summary>
            A time base dependency. The custom patch does depend on time explicitly and has a time base defined by the system. (It uses the time parameter of the execute:atTime:withArguments: method.)
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInAttributeNameKey">
            <summary>
            The key for the custom patch name. The associated value is an NSString object.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInAttributeDescriptionKey">
            <summary>
            The key for the custom patch description. The associated value is an NSString object.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInAttributeCopyrightKey">
            <summary>
            The key for the custom patch copyright information. The associated value is an NSString object.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeTypeKey">
            <summary>
            QCPortAttributeTypeKey
            The key for the port type. The associated value can be of any of the following constants: QCPortTypeBoolean, QCPortTypeIndex, QCPortTypeNumber, QCPortTypeString, QCPortTypeColor, QCPortTypeImage, or QCPortTypeStructure.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeNameKey">
            <summary>
            The key for the port name. The associated value is an NSString object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeMinimumValueKey">
            <summary>
            The key for the port minimum value. The associated value is an NSNumber object that specifies the minimum numerical value accepted by the port.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeMaximumValueKey">
            <summary>
            The key for the port maximum value. The associated value is an NSNumber object that specifies the maximum numerical value accepted by the port.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeDefaultValueKey">
            <summary>
            The key for the port default value. You can use this key only for value ports (Boolean, Index, Number, Color and String).
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortAttributeMenuItemsKey">
            <summary>
            The key for the menu items. The associated value is an array of strings that are displayed in the user interface as a pop-up menu when the user double-clicks a port, as shown for the Blending input port of the Billboard patch. You can use this key only for an index port.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionArgumentEventKey">
            <summary>
            The current NSEvent if available.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInExecutionArgumentMouseLocationKey">
            <summary>
            The current location of the mouse (as an NSPoint object stored in an NSValue object) in normalized coordinates relative to the OpenGL context viewport ([0,1]x[0,1] with the origin (0,0) at the lower-left corner).
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInPixelFormatARGB8">
            <summary>
            An ARGB8 format. The alpha component is stored in the most significant bits of each pixel. Each pixel component is 8 bits. For best performance, use this format on PowerPC-based Macintosh computers, as it represents of the order of the data in memory.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInPixelFormatBGRA8">
            <summary>
            A BGRA8 format. The alpha component is stored in the least significant bits of each pixel. Each pixel component is 8 bits. For best performance, use this format on Intel-PC-based Macintosh computers, as it represents of the order of the data in memory.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInPixelFormatRGBAf">
            <summary>
            An RGBAf format. Pixel components are represented as floating-point values.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInPixelFormatI8">
            <summary>
            An I8 format. Intensity information is represented as an 8-bit value.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPlugInPixelFormatIf">
            <summary>
            An If format. Intensity information is represented as a floating-point value.
            Available in Mac OS X v10.5 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeBoolean">
            <summary>
            The port type for a Boolean value. The associated value can be an NSNumber object or any object that responds to the -intValue, -floatValue, or -doubleValue methods.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeIndex">
            <summary>
            The port type for an index value. The associated value can be an NSNumber object or any object that responds to the -intValue, -floatValue, or -doubleValue methods.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeNumber">
            <summary>
            The port type for a number value. The associated value can be an NSNumber object or any object that responds to the -intValue, -floatValue, or -doubleValue methods.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeString">
            <summary>
            The port type for a string. The associated value can be an NSString object or any object that responds to the -stringValue or -description methods.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeColor">
            <summary>
            The port type for a color value. The associated value must be an NSColor object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeImage">
            <summary>
            The port type for an image. The associated value can be an NSImage object or a CIImage object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCPlugIn.QCPortTypeStructure">
            <summary>
            The port type for an array, dictionary, or other structure, such as an NSArray or NSDictionary object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugIn.Attributes">
            <summary>
            Returns a dictionary that contains strings for the user interface that describe the custom patch.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugIn.ExecutionMode">
            <summary>
            Returns the execution mode of the custom patch
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugIn.PlugInKeys">
            <summary>
            Returns the keys for the internal settings of a custom patch.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugIn.SortedPropertyPortKeys">
            <summary>
            Returns and array of property port keys in the order you want them to appear in the user interface.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugIn.TimeMode">
            <summary>
            Returns the time mode for the custom patch.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.AttibutesForPropertyPortWithKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns a dictionary that contains strings for the user interface that describe the optional attributes for ports created from properties.
            </summary>
            <param name="key">
            The <see cref="T:Monobjc.Cocoa.NSString" /> name of the property.
            </param>
            <returns>
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> that contains key-value pairs for the port’s attributes. The keys must be one or more of the constants defined in “Input and Output Port Attributes.”
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.LoadPluginAtPath(Monobjc.Cocoa.NSString)">
            <summary>
            Loads a Quartz Composer plug-in bundle from the specified path.
            </summary>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /> to the location of the bundle.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> if successful
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.RegisterPlugInClass(Monobjc.Class)">
            <summary>
            Registers a QCPlugIn subclass. Use this method only if the code for your custom patch is mixed with your application code, and you plan only to use the custom patch from within your application.
            </summary>
            <param name="aClass">
            A <see cref="T:Monobjc.Class" /> QCPlugIn subclass.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.AddInputPortWithTypeForKeyWithAttributes(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Adds an input port of the specified type and associates a key and attributes with the port.
            </summary>
            <param name="type">
            The <see cref="T:Monobjc.Cocoa.NSString" /> port type.
            </param>
            <param name="key">
            The <see cref="T:Monobjc.Cocoa.NSString" /> key to associate with the port.
            </param>
            <param name="attributes">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> of attributes for the port. See “Input and Output Port Attributes”. Although the dictionary is optional, it’s recommended that provide attributes to enhance the experience of those who use your custom patch. The attributes appear in a help tag when the user hovers a pointer over the property port on your custom patch. (See attributesForPropertyPortWithKey:.) Pass nil if you do not want to provide attributes.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.AddOutputPortWithTypeForKeyWithAttributes(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Adds an output port of the specified type and associates a key and attributes with the port.
            </summary>
            <param name="type">
            The <see cref="T:Monobjc.Cocoa.NSString" /> port type.
            </param>
            <param name="key">
            The <see cref="T:Monobjc.Cocoa.NSString" /> key to associate with the port.
            </param>
            <param name="attributes">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> of attributes for the port. See “Input and Output Port Attributes”. Although the dictionary is optional, it’s recommended that provide attributes to enhance the experience of those who use your custom patch. The attributes appear in a help tag when the user hovers a pointer over the property port on your custom patch. (See attributesForPropertyPortWithKey:.) Pass nil if you do not want to provide attributes.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.CreateViewController">
            <summary>
            Creates and returns a view controller for the Settings pane of a custom patch.
            </summary>
            <returns>
            A <see cref="T:Monobjc.QuartzComposer.QCPlugInViewController" /> controller for the custom patch. Quartz Composer releases the controller when it is no longer needed. If necessary, you can return a subclass of QCPlugInViewController, but this it not typically done.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.DidValueForInputKeyChange(Monobjc.Cocoa.NSString)">
            <summary>
            Returns whether the input port value changed since the last execution of the custom patch.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key for the input port whose value you want to check.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if the value on the input port changed since the last time the execute:atTime:withArguments: method was called; always returns FALSE if called outside of the execute:atTime:withArguments: method.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.DisableExecution``1(``0)">
            <summary>
            Allows you to perform custom tasks when the execution of the QCPlugIn object is paused.
            </summary>
            <param name="context">
            A <see cref="T:Monobjc.Id" /> opaque object , conforming to the QCPlugInContext Protocol protocol, that represents the execution context of the QCPlugIn object. Do not retain this object or use it outside of the scope of this method.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.EnableExecution``1(``0)">
            <summary>
            Allows you to perform custom tasks when the execution of the QCPlugIn object is resumed.
            </summary>
            <param name="context">
            A <see cref="T:Monobjc.Id" /> opaque object , conforming to the QCPlugInContext Protocol protocol, that represents the execution context of the QCPlugIn object. Do not retain this object or use it outside of the scope of this method.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.ExecuteAtTimeWithArguments``1(``0,System.Double,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Performs the processing or rendering tasks appropriate for the custom patch.
            </summary>
            <param name="context">
            A <see cref="T:Monobjc.Id" /> opaque object , conforming to the QCPlugInContext Protocol protocol, that represents the execution context of the QCPlugIn object. Do not retain this object or use it outside of the scope of this method.
            </param>
            <param name="time">
            A <see cref="T:System.Double" /> The execution interval.
            </param>
            <param name="arguments">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /> A dictionary of arguments that can be used during execution. See “Execution Arguments”.
            </param>
            <returns>
            	FALSE indicates the custom patch was not able to execute successfully. In this case, the Quartz Composer engine stops rendering the current frame.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.RemoveInputPortForKey(Monobjc.Cocoa.NSString)">
            <summary>
            Removes the input port for a given key.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key associated with the port that you want to remove.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.RemoveOutputPortForKey(Monobjc.Cocoa.NSString)">
            <summary>
            Removes the output port for a given key
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key associated with the port that you want to remove.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.SerializedValueForKey(Monobjc.Cocoa.NSString)">
            <summary>
            Provides custom serialization for patch internal settings that do not comply to the NSCoding protocol.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key for the value to retrieve.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> Either nil or a value that’s compliant with property lists: NSString, NSNumber, NSDate, NSData, NSArray, or NSDictionary.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.SetSerializedValueForKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Provides custom deserialization for patch internal settings that were previously serialized using the method serializedValueForKey:.
            </summary>
            <param name="serializedValue">
            A <see cref="T:Monobjc.Id" /> value to deserialize.
            </param>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key for the value to deserialize.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.SetValueForOutputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the value of an output port.
            </summary>
            <param name="value">
            A <see cref="T:Monobjc.Id" /> value you want to set for the specified key.
            </param>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key associated with the output port whose value you want to set.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if successful; FALSE if called outside of the execute:atTime:withArguments: method.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.StartExecution``1(``0)">
            <summary>
            Allows you to perform custom setup tasks before the Quartz Composer engine starts rendering.
            </summary>
            <param name="context">
            A <see cref="T:Monobjc.Id" /> opaque object , conforming to the QCPlugInContext Protocol protocol, that represents the execution context of the QCPlugIn object. Do not retain this object or use it outside of the scope of this method.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. FALSE indicates a fatal error occurred and prevents the Quartz Composer engine from starting.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.StopExecution``1(``0)">
            <summary>
            Allows you to perform custom tasks when the QCPlugIn object stops executing.
            </summary>
            <param name="context">
            A <see cref="T:Monobjc.Id" /> opaque object , conforming to the QCPlugInContext Protocol protocol, that represents the execution context of the QCPlugIn object. Do not retain this object or use it outside of the scope of this method.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugIn.ValueForInputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current value for an input port.
            </summary>
            <param name="key">
            A <see cref="T:Monobjc.Cocoa.NSString" /> key for the input port you want to check.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> value associated with the key or nil if called outside of the execute:atTime:withArguments: method.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInContext.Bounds">
            <summary>
            Returns the bounds of the rendering context. (required)
            </summary>
            <returns>
            The bounds of the rendering context expressed in Quartz Composer units.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInContext.CGLContextObj">
            <summary>
            Returns the destination CGL context to use for OpenGL rendering from within the execution method. (required)
            </summary>
            <returns>
            The destination CGL context.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInContext.ColorSpace">
            <summary>
            Returns the color space used by the rendering context. (required)
            </summary>
            <returns>
            An RGB color space; NULL if the custom patch execution mode is not consumer.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInContext.UserInfo">
            <summary>
            Returns a mutable dictionary that contains information that can be shared between all instances of the QCPlugIn subclass, running in the same Quartz Composer context. (required)
            </summary>
            <returns>
            A <see cref="T:Monobjc.Cocoa.NSMutableDictionary" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInContext.LogMessage(Monobjc.Cocoa.NSString)">
            <summary>
            Writes a message to the Quartz Composer log. (required)
            </summary>
            <param name="format">
            A <see cref="T:Monobjc.Cocoa.NSString" /> to write to the log. The default location for the log is the standard output.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInContext.OutputImageProviderFromBufferWithPixelFormat(Monobjc.Cocoa.NSString,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,Monobjc.QuartzComposer.QCPlugInBufferReleaseCallback,System.IntPtr,Monobjc.Cocoa.CGColorSpace,System.Boolean)">
            <summary>
            Returns an image provider from a single memory buffer. (required)
            </summary>
            <param name="format">
            A <see cref="T:Monobjc.Cocoa.NSString" />. The pixel format of the memory buffer. This must be compatible with the color space.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32" /> The width, in bytes, of the memory buffer.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32" /> The height, in bytes, of the memory buffer.
            </param>
            <param name="baseAddress">
            A <see cref="T:System.IntPtr" /> The base address of the memory buffer, which must be multiple of 16.
            </param>
            <param name="bytesPerRow">
            A <see cref="T:System.UInt32" /> The number of bytes per row of the memory buffer, which must be multiple of 16.
            </param>
            <param name="releaseCallback">
            A <see cref="T:Monobjc.QuartzComposer.QCPlugInBufferReleaseCallback" /> The release callback. Your callback must use this type definition:
            typedef void (*QCPlugInBufferReleaseCallback)(const void* address, void* context);
            If you name your callback function MyQCPlugInBufferReleaseCallback, you would declare it like this:
            void MyQCPlugInBufferReleaseCallback (const void address,void * context);
            Quartz Composer invokes your callback when the memory buffer is no longer needed. The callback can be called from any thread at any time
            </param>
            <param name="releaseContext">
            A <see cref="T:System.IntPtr" /> The context to pass to the release callback.
            </param>
            <param name="colorSpace">
            A <see cref="T:Monobjc.Cocoa.CGColorSpace" /> The color space of the memory buffer. This must be compatible with the pixel format.
            </param>
            <param name="shouldColorMatch">
            A <see cref="T:System.Boolean" /> A Boolean that specifies whether Quartz Composer should color match the image. Pass FALSE if the image is a mask or gradient or should not be color matched for some other reason. Otherwise, pass TRUE.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInContext.outputImageProviderFromTextureWithPixelFormat(Monobjc.Cocoa.NSString,System.UInt32,System.UInt32,System.UInt32,System.Boolean,Monobjc.QuartzComposer.QCPlugInTextureReleaseCallback,System.IntPtr,Monobjc.Cocoa.CGColorSpace,System.Boolean)">
            <summary>
            Returns an image provider from an OpenGL texture. (required)
            </summary>
            <param name="format">
            A <see cref="T:Monobjc.Cocoa.NSString" /> The pixel format of the texture. This must be compatible with the color space.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32" /> The width, in bytes, of the texture.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32" /> The height, in bytes, of the texture.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32" /> An OpenGL texture of type GL_TEXTURE_RECTANGLE_EXT that is valid on the Quartz Composer OpenGL context. Note that textures do not have a retain and release mechanism. This means that your application must make sure that the texture exists for the life cycle of the image provider.
            </param>
            <param name="flipped">
            A <see cref="T:System.Boolean" /> TRUE to have Quartz Composer flip the contents of the texture vertically.
            </param>
            <param name="releaseCallback">
            A <see cref="T:Monobjc.QuartzComposer.QCPlugInTextureReleaseCallback" /> The release callback. Your callback must use this type definition:
            typedef void (*QCPlugInTextureReleaseCallback)(CGLContextObj cgl_ctx, GLuint name, void* context);
            If you name your callback function MyQCPlugInTextureReleaseCallback, you would declare it like this:
            void MyQCPlugInTextureReleaseCallback (CGLContextObj cgl_ctx, GLuint name, void* context);
            Quartz Composer invokes your callback when the memory buffer is no longer needed. The callback can be called from any thread at any time
            </param>
            <param name="releaseContext">
            A <see cref="T:System.IntPtr" /> The context to pass to the release callback.
            </param>
            <param name="colorSpace">
            A <see cref="T:Monobjc.Cocoa.CGColorSpace" /> The color space of the texture. This must be compatible with the pixel format.
            </param>
            <param name="colorMatch">
            A <see cref="T:System.Boolean" /> A Boolean that specifies whether Quartz Composer should color match the texture. Pass FALSE if the texture is a mask or gradient or should not be color matched for some other reason. Otherwise, pass TRUE.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> image provider.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferBaseAddress">
            <summary>
            Returns the base address of the image buffer. The base address is guaranteed to be aligned on a 16-byte boundary.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferBytesPerRow">
            <summary>
            Returns the bytes per row of the buffer representation. The number of bytes per row is guaranteed to be a multiple of 16.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferColorSpace">
            <summary>
            Returns the color space of the image buffer representation.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferPixelFormat">
            <summary>
            Returns a string that specifies the pixel format. The supported formats are ARGB8 (8-bit alpha, red, green, blue), BGRA8 (8-bit blue, green, red, and alpha), RGBAf (floating-point, red, green, blue, alpha), I8 (8-bit intensity), and If (floating-point intensity).
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferPixelsHigh">
            <summary>
            Returns the height of the image buffer representation. The height, expressed in pixels.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.BufferPixelsWide">
            <summary>
            Returns the width of the image buffer representation. The width, expressed in pixels.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.ImageBounds">
            <summary>
            Returns the actual bounds of the image source expressed in pixels and aligned to integer boundaries.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.ImageColorSpace">
            <summary>
            Returns the color space of the image source. The color space of the image source, typically RGB or Gray type.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.ShouldColorMatch">
            <summary>
            Returns whether or not the image source should be color matched. FALSE if the source is a mask or gradient; TRUE otherwise.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TextureColorSpace">
            <summary>
            Returns the color space of the texture representation.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TextureFlipped">
            <summary>
            Returns whether or not the contents of the texture are flipped vertically. TRUE if the contents of the texture are flipped (upside-down); FALSE otherwise.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TextureMatrix">
            <summary>
            Returns a texture matrix. A 4x4 texture matrix created by scaling (from [0, pixels] to [0,1]) and vertically flipping the texture coordinates; NULL if coordinate transformation is not required.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TextureName">
            <summary>
            Returns the texture name.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TexturePixelsHigh">
            <summary>
            Returns the height of the texture representation.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TexturePixelsWide">
            <summary>
            Returns the width of the texture representation.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInInputImageSource.TextureTarget">
            <summary>
            Returns the texture target. The texture target, either GL_TEXTURE_2D or GL_TEXTURE_RECTANGLE_EXT.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.bindTextureRepresentationToCGLContextTextureUnitNormalizeCoordinates(System.IntPtr,System.Enum,System.Boolean)">
            <summary>
            Binds the texture to a given texture unit and optionally scales or flips the texture.
            </summary>
            <param name="cgl_ctx">
            A <see cref="T:System.IntPtr" /> represents a CGL context to render to.
            </param>
            <param name="unit">
            A <see cref="T:System.Enum" /> texture unit to bind to (such as, GL_TEXTURE0)
            </param>
            <param name="flag">
            A <see cref="T:System.Boolean" /> apply a texture matrix to scale coordinates (from [0, pixels] to [0,1]) and flip them vertically (if necessary), pass TRUE.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.LockBufferRepresentationWithPixelFormatColorSpaceForBounds(Monobjc.Cocoa.NSString,Monobjc.Cocoa.CGColorSpace,Monobjc.Cocoa.NSRect)">
            <summary>
            Creates a memory buffer representation from a subregion of the image source using the provided pixel format and color space.
            </summary>
            <param name="format">
            The <see cref="T:Monobjc.Cocoa.NSString" />	 pixel format that is compatible with the color space.
            </param>
            <param name="colorSpace">
            The <see cref="T:Monobjc.Cocoa.CGColorSpace" /> Quartz color space that is compatible with the pixel format.
            </param>
            <param name="bounds">
            The <see cref="T:Monobjc.Cocoa.NSRect" /> bounds of the subregion, expressed as pixels, and aligned to integer boundaries.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if successful; otherwise FALSE.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.LockTextureRepresentationWithColorSpaceForBounds(Monobjc.Cocoa.CGColorSpace,Monobjc.Cocoa.NSRect)">
            <summary>
            </summary>
            <param name="colorSpace">
            A <see cref="T:Monobjc.Cocoa.CGColorSpace" /> quartz color space.
            </param>
            <param name="bounds">
            The <see cref="T:Monobjc.Cocoa.NSRect" /> bounds of the subregion, expressed in pixels. They must be aligned to integer boundaries.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE is successful; FALSE if texture can’t be created.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.unbindTextureRepresentationFromCGLContextTextureUnit(System.IntPtr,System.Enum)">
            <summary>
            </summary>
            <param name="cgl_ctx">
            A <see cref="T:System.IntPtr" /> to a CGL context.
            </param>
            <param name="unit">
            A <see cref="T:System.Enum" />. The texture unit to unbind from (such as, GL_TEXTURE0)
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.UnlockBufferRepresentation">
            <summary>
            Releases the memory buffer representation of the image source.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInInputImageSource.UnlockTextureRepresentation">
            <summary>
            Releases the OpenGL texture representation of the image source.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.ImageBounds">
            <summary>
            Returns the bounds of the image expressed in pixels and aligned to integer boundaries.  the image. Note that the QCPlugIn class does not support images that have infinite bounds.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.ImageColorSpace">
            <summary>
            Returns the color space of the image or NULL if the image should not be color matched.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.ShouldColorMatch">
            <summary>
            Returns whether the image should be color matched. FALSE if the image is a mask or gradient; otherwise TRUE, which is the default.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.SupportedBufferPixelFormats">
            <summary>
            Returns a list of pixel formats that are supported for rendering to a memory buffer. A list of pixel formats, in order of preference, that the image can be rendered to in memory, or nil if the image provider does not support rendering to the CPU.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.SupportedRenderedTexturePixelFormats">
            <summary>
            Returns a list of pixel formats that are supported for rendering to an onscreen OpenGL context.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.CanRenderWithCGLContext(System.IntPtr)">
            <summary>
            Returns whether the image data can be rendered into the provided CGL context.
            </summary>
            <param name="cgl_ctx">
            The <see cref="T:System.IntPtr" /> CGL context that your image will be rendered to.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if the image can be rendered into this CGL context; otherwise FALSE, in which case renderToBuffer:withBytesPerRow:pixelFormat:forBounds: is called.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.CopyRenderedTextureForCGLContextPixelFormatBoundsIsFlipped(System.IntPtr,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSRect,System.Boolean)">
            <summary>
            Returns the name of an OpenGL texture of type GL_TEXTURE_RECTANGLE_EXT that contains a subregion of the image in a given pixel format.
            </summary>
            <param name="cgl_ctx">
            The <see cref="T:System.IntPtr" /> CGL context to render to.
            </param>
            <param name="pixelFormat">
            A <see cref="T:Monobjc.Cocoa.NSString" /> string that represents the pixel format of the texture.
            </param>
            <param name="bounds">
            The <see cref="T:Monobjc.Cocoa.NSRect" /> bounds of the subregion of the image.
            </param>
            <param name="isFlipped">
            A <see cref="T:System.Boolean" />.Set to TRUE on output if the contents of the returned texture are vertically flipped.
            </param>
            <returns>
            A <see cref="T:System.UInt32" />. The name of an OpenGL texture of type GL_TEXTURE_RECTANGLE_EXT that contains a subregion of the image in a given pixel format or 0 if the texture can’t be provided.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.ReleaseRenderedTextureForCGLContext(System.UInt32,System.IntPtr)">
            <summary>
            Releases the previously copied texture.
            </summary>
            <param name="name">
            A <see cref="T:System.UInt32" /> name of the previously bound texture.
            </param>
            <param name="cgl_ctx">
            A <see cref="T:System.IntPtr" /> CGL context.
            </param>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.RenderToBufferWithBytesPerRowPixelFormatForBounds(System.IntPtr,System.UInt32,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSRect)">
            <summary>
            Renders a subregion of the image into the supplied memory buffer using the specified pixel format.
            </summary>
            <param name="baseAddress">
            A <see cref="T:System.IntPtr" /> base address of the memory buffer. The Quartz Composer engine passes you an address that is aligned on a 16-byte boundary
            </param>
            <param name="rowBytes">
            A <see cref="T:System.UInt32" /> number of bytes per row of the image data. The Quartz Composer engine guarantees this value is a multiple of 16.
            </param>
            <param name="format">
            A <see cref="T:Monobjc.Cocoa.NSString" /> pixel format of the image data.
            </param>
            <param name="bounds">
            A <see cref="T:Monobjc.Cocoa.NSRect" /> bounds of the subregion.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if the image is rendered successfully into the buffer; FALSE on failure or if the image provider doesn’t support CPU rendering.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.IQCPlugInOutputImageProvider.RenderWithCGLContextForBounds(System.IntPtr,Monobjc.Cocoa.NSRect)">
            <summary>
            Renders a subregion of the image to the provided CGL context.
            </summary>
            <param name="cgl_ctx">
            A <see cref="T:System.IntPtr" /> CGL context to render to.
            </param>
            <param name="bounds">
            A <see cref="T:Monobjc.Cocoa.NSRect" /> bounds of the subregion.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> TRUE if successful; FALSE on failure or if the image provider doesn’t support GPU rendering.
            </returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCPlugInViewController.PlugIn">
            <summary>
            Returns the QCPlugIn object associated with the view controller for the custom patch.
            </summary>
            <returns>
            The QCPlugIn object associated with the view controller for the custom patch.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCPlugInViewController.InitWithPlugInViewNibName(Monobjc.QuartzComposer.QCPlugIn,Monobjc.Cocoa.NSString)">
            <summary>
            Creates and initializes a controller for the specified QCPlugIn object and nib file.
            </summary>
            <param name="plugin">
            A <see cref="T:Monobjc.QuartzComposer.QCPlugIn" /> object that uses internal settings.
            </param>
            <param name="name">
            A <see cref="T:Monobjc.Cocoa.NSString" /> name of the nib file that contains the view for the custom patch.
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> QCPlugInViewController object.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.#ctor(Monobjc.QuartzComposer.QCComposition,System.IntPtr)">
            <summary>
            Creates a renderer object with a composition object and a color space
            </summary>
            <param name="composition">
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></param>
            <param name="colorSpace">
            A <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.#ctor(System.IntPtr,System.IntPtr,System.IntPtr,Monobjc.QuartzComposer.QCComposition)">
            <summary>
            Creates a renderer object with a CGLContextObj object, a pixel format, a color space, and a composition object.
            </summary>
            <param name="cglContext">
            A <see cref="T:System.IntPtr" /></param>
            <param name="pixelFormat">
            A <see cref="T:System.IntPtr" /></param>
            <param name="colorSpace">
            A <see cref="T:System.IntPtr" /></param>
            <param name="composition">
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.#ctor(Monobjc.Cocoa.NSSize,System.IntPtr,Monobjc.QuartzComposer.QCComposition)">
            <summary>
            Creates an offscreen renderer of a given size with the provided color space and composition object.
            </summary>
            <param name="size">
            A <see cref="T:Monobjc.Cocoa.NSSize" /></param>
            <param name="colorSpace">
            A <see cref="T:System.IntPtr" /></param>
            <param name="composition">
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.#ctor(Monobjc.Cocoa.NSOpenGLContext,Monobjc.Cocoa.NSOpenGLPixelFormat,Monobjc.Cocoa.NSString)">
            <summary>
            Creates a renderer object with an NSOpenGLContext object and a composition file.
            </summary>
            <param name="oglContext">
            A <see cref="T:Monobjc.Cocoa.NSOpenGLContext" /></param>
            <param name="pixelFormat">
            A <see cref="T:Monobjc.Cocoa.NSOpenGLPixelFormat" /></param>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /></param>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCRenderer.QCRendererEventKey">
            <summary>
            A key for a renderer event. The associated value is an NSEvent object.
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCRenderer.QCRendererMouseLocationKey">
            <summary>
            A key for the mouse location. The associated value is an NSPoint object stored in an NSValue object. The mouse location is in normalized coordinates relative to the OpenGL context viewport ([0,1]x[0,1] with the origin (0,0) at the lower-left corner).
            Available in Mac OS X v10.4 and later.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.Composition">
            <summary>
            Returns the composition object associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.SnapshotImage">
            <summary>
            Returns an NSImage object of the current image in the OpenGL context associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.Attributes">
            <summary>
            Returns the attributes of the composition associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.InputKeys">
            <summary>
            Returns an array that contains the keys that identify the input ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.OutputKeys">
            <summary>
            Returns an array that contains the keys that identify the output ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.PropertyListFromInputValues">
            <summary>
            Returns a property list object that represents the current values for all the input keys of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCRenderer.UserInfo">
            <summary>
            Returns a mutable dictionary for storing arbitrary information.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.RenderAtTimeArguments(System.Double,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Renders a frame of a composition at the specified time.
            </summary>
            <param name="time">
            A <see cref="T:System.Double" /></param>
            <param name="arguments">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.CreateSnapshotImageOfType(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current image in the OpenGL context associated with the renderer, as an image object of the provided image type
            </summary>
            <param name="type">
            A <see cref="T:Monobjc.Cocoa.NSString" /></param>
            <returns>
            A <see cref="T:Monobjc.Id" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.SetValueForInputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.ValueForInputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.ValueForOutputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an output port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.ValueForOutputKeyOfType(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current value on an output port (identified by its key) of the root patch of the composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCRenderer.SetInputValuesWithPropertyList(Monobjc.Id)">
            <summary>
            Sets the values for the input keys of the composition from a previously saved property list.
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCView.QCViewDidStartRenderingNotification">
            <summary>
            Posted when the view starts rendering.
            Available in Mac OS X v10.4 and later
            </summary>
        </member>
        <member name="F:Monobjc.QuartzComposer.QCView.QCViewDidStopRenderingNotification">
            <summary>
            Posted when the view stops rendering.
            Available in Mac OS X v10.4 and later
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.AutoStartsRendering">
            <summary>
            Sets or gets whether the composition that is in the view starts rendering automatically when the view is put on the screen.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.EraseColor">
            <summary>
            Sets or gets the color used to erase the view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.EventForwardingMask">
            <summary>
            Sets or gets the mask used to filter which types of events are forwarded from the view to the composition during rendering.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.MaxRenderingFrameRate">
            <summary>
            Sets or gets the maximum rendering frame rate.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.IsPausedRendering">
            <summary>
            Returns whether or not the rendering in the view is paused.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.IsRendering">
            <summary>
            Checks whether a composition is rendering in the view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.OpenGLContext">
            <summary>
            Returns the OpenGL context used by the view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.OpenGLPixelFormat">
            <summary>
            Returns the OpenGL pixel format used by the view.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.Attributes">
            <summary>
            Returns the attributes of the composition associated with the renderer.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.InputKeys">
            <summary>
            Returns an array that contains the keys that identify the input ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.OutputKeys">
            <summary>
            Returns an array that contains the keys that identify the output ports of the root patch of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.PropertyListFromInputValues">
            <summary>
            Returns a property list object that represents the current values for all the input keys of the composition.
            </summary>
        </member>
        <member name="P:Monobjc.QuartzComposer.QCView.UserInfo">
            <summary>
            Returns a mutable dictionary for storing arbitrary information.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.LoadCompositionFromFile(Monobjc.Cocoa.NSString)">
            <summary>
            Loads the composition file located at the specified path.
            </summary>
            <param name="path">
            A <see cref="T:Monobjc.Cocoa.NSString" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.LoadComposition(Monobjc.QuartzComposer.QCComposition)">
            <summary>
            Loads a QCComposition object into the view.
            </summary>
            <param name="composition">
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.LoadedComposition">
            <summary>
            Returns the composition loaded in the view.
            </summary>
            <returns>
            A <see cref="T:Monobjc.QuartzComposer.QCComposition" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.UnloadComposition">
            <summary>
            Unloads the composition from the view.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.Erase">
            <summary>
            Clears the view using the current erase color.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.StartRendering">
            <summary>
            Starts rendering the composition that is in the view.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.RenderAtTimeArguments(System.Double,Monobjc.Cocoa.NSDictionary)">
            <summary>
            Overrides to perform your custom operations prior to or after rendering a frame of a composition
            </summary>
            <param name="time">
            A <see cref="T:System.Double" /> rendering time in seconds
            </param>
            <param name="arguments">
            A <see cref="T:Monobjc.Cocoa.NSDictionary" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.PauseRendering">
            <summary>
            Pauses rendering in the view.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.ResumeRendering">
            <summary>
            Resumes rendering a paused composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.StopRendering">
            <summary>
            Stops rendering the composition that is in the view.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.SnapshotImage">
            <summary>
            Returns an NSImage object of the current image in the view.
            </summary>
            <returns>
            A <see cref="T:Monobjc.Cocoa.NSImage" /></returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.CreateSnapshotImageOfType(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current image in the view as an image object of the provided image type.
            </summary>
            <param>
            A <see cref="T:Monobjc.Cocoa.NSString" /> that specifies any of the following image types: NSBitmapImageRep, NSImage, CIImage, CGImage, CVOpenGLBuffer, CVPixelBuffer
            </param>
            <returns>
            A <see cref="T:Monobjc.Id" /> The snapshot image in the provided image type. You are responsible for releasing this object when you no longer need it.
            </returns>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.Start(Monobjc.Id)">
            <summary>
            Starts rendering a composition in a view.
            </summary>
            <param name="sender">
            A <see cref="T:Monobjc.Id" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.Stop(Monobjc.Id)">
            <summary>
            Stops rendering a composition in a view.
            </summary>
            <param name="sender">
            A <see cref="T:Monobjc.Id" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.Play(Monobjc.Id)">
            <summary>
            Plays or pauses a composition in a view.
            </summary>
            <param name="sender">
            A <see cref="T:Monobjc.Id" /></param>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.SetValueForInputKey(Monobjc.Id,Monobjc.Cocoa.NSString)">
            <summary>
            Sets the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.ValueForInputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an input port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.ValueForOutputKey(Monobjc.Cocoa.NSString)">
            <summary>
            Returns the value for an output port of a composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.ValueForOutputKeyOfType(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString)">
            <summary>
            Returns the current value on an output port (identified by its key) of the root patch of the composition.
            </summary>
        </member>
        <member name="M:Monobjc.QuartzComposer.QCView.SetInputValuesWithPropertyList(Monobjc.Id)">
            <summary>
            Sets the values for the input keys of the composition from a previously saved property list.
            </summary>
        </member>
    </members>
</doc>
