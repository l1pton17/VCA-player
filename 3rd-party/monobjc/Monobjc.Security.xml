<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/laurent/Projects/Mercurial/Monobjc/dist/2.0/Monobjc.Security</name>
    </assembly>
    <members>
        <member name="T:Monobjc.Security.Properties.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Monobjc.Security.Properties.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.Properties.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Monobjc.Security.AuthorizationEnvironment">
            <summary>
            Represents a set of authorization items.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationEnvironment.count">
            <summary>
            The number of elements in the items array.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationEnvironment.items">
            <summary>
            A pointer to an array of authorization items. If count is greater than 1, items points to the first item in an array of such items. You should set this parameter to NULL if there are no items.
            </summary>
        </member>
        <member name="T:Monobjc.Security.AuthorizationFlags">
            <summary>
            Define valid authorization options.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagDefaults">
            <summary>
                <para>If no bits are set, none of the following features are available.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagInteractionAllowed">
            <summary>
                <para>If the bit specified by this mask is set, you permit the Security Server to interact with the user when necessary.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagExtendRights">
            <summary>
                <para>If the bit specified by this mask is set, the Security Server attempts to grant the rights requested. Once the Security Server denies one right, it ignores the remaining requested rights.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagPartialRights">
            <summary>
                <para>If the bit specified by this mask and the kAuthorizationFlagExtendRights mask are set, the Security Server grants or denies rights on an individual basis and all rights are checked.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagDestroyRights">
            <summary>
                <para>If the bit specified by this mask is set, the Security Server revokes authorization from the process as well as from any other process that is sharing the authorization. If the bit specified by this mask is not set, the Security Server revokes authorization from the process but not from other processes that share the authorization.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagPreAuthorize">
            <summary>
                <para>If the bit specified by this mask is set, the Security Server preauthorizes the rights requested.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationFlags.kAuthorizationFlagNoData">
            <summary>
                <para>Private bits. Do not use.</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.AuthorizationItem">
            <summary>
            Contains information about an authorization right or the authorization environment.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItem.name">
            <summary>
            The required name of the authorization right or environment data. The name of a right is something that you create. You should name rights in a style similar to Java package names. For example, "com.myOrganization.myProduct.myRight". Set this field to kAuthorizationRightExecute when requesting a right for use in the function AuthorizationExecuteWithPrivileges.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItem.valueLength">
            <summary>
            An unsigned 32-bit integer that represents the number of bytes in the value field. Set the valueLength field to 0 if you set the value field to NULL.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItem.value">
            <summary>
            A pointer to information pertaining to the name field. For example, if the name field is set to the value represented by the constant kAuthorizationRightExecute, then set the value field to the full POSIX pathname of the tool you want to execute. In most other cases, set this field to NULL.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItem.flags">
            <summary>
            Reserved option bits. Set to 0.
            </summary>
        </member>
        <member name="T:Monobjc.Security.AuthorizationItemSet">
            <summary>
            Represents a set of authorization items.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItemSet.count">
            <summary>
            The number of elements in the items array.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationItemSet.items">
            <summary>
            A pointer to an array of authorization items. If count is greater than 1, items points to the first item in an array of such items. You should set this parameter to NULL if there are no items.
            </summary>
        </member>
        <member name="T:Monobjc.Security.AuthorizationRights">
            <summary>
            Represents a set of authorization items.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationRights.count">
            <summary>
            The number of elements in the items array.
            </summary>
        </member>
        <member name="F:Monobjc.Security.AuthorizationRights.items">
            <summary>
            A pointer to an array of authorization items. If count is greater than 1, items points to the first item in an array of such items. You should set this parameter to NULL if there are no items.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorization">
            <summary>
            Managed wrapper for SFAuthorization Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.#ctor(Monobjc.Security.AuthorizationFlags,Monobjc.Security.AuthorizationRights,Monobjc.Security.AuthorizationEnvironment)">
            <summary>
                <para>Initializes an authorization object with the specified flags, rights, and environment.</para>
                <para>Original signature is '-(id)initWithFlags:(AuthorizationFlags)flags rights:(const AuthorizationRights *)rights environment:(const AuthorizationEnvironment *)environment'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorization" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorization" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorization" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="F:Monobjc.Security.SFAuthorization.SFAuthorizationClass">
            <summary>
            Static field for a quick access to the SFAuthorization class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorization.Authorization">
            <summary>
                <para>Returns an authorization object.</para>
                <para>Original signature is '+(id)authorization'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorization.AuthorizationRef">
            <summary>
                <para>Returns the authorization reference for this object.</para>
                <para>Original signature is '-(AuthorizationRef)authorizationRef'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.AuthorizationWithFlagsRightsEnvironment(Monobjc.Security.AuthorizationFlags,Monobjc.Security.AuthorizationRights,Monobjc.Security.AuthorizationEnvironment)">
            <summary>
                <para>Returns an authorization object initialized with the specified flags, rights and environment.</para>
                <para>Original signature is '+(id)authorizationWithFlags:(AuthorizationFlags)flags rights:(const AuthorizationRights *)rights environment:(const AuthorizationEnvironment *)environment'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="flags">A bit mask for specifying authorization options. Use the following option sets:Pass the constant kAuthorizationFlagDefaults if no options are necessary.Specify the kAuthorizationFlagExtendRights mask to request rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPartialRights and kAuthorizationFlagExtendRights masks to request partial rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPreAuthorize and kAuthorizationFlagExtendRights masks to preauthorize rights.Specify the kAuthorizationFlagDestroyRights mask to prevent the Security framework from preserving the rights obtained during this call.</param>
            <param name="rights">A pointer to a set of authorization rights you create. Pass NULL if the application requires no rights at this time.</param>
            <param name="environment">Data used when authorizing or preauthorizing rights. In Mac OS X v10.3 and later, you can pass icon or prompt data to be used in the authentication dialog box. Possible values for this parameter are listed in Security.framework/Headers/AuthorizationTags.h. The data passed in this parameter is not stored in the authorization reference; it is used only during authorization. If you are not passing any data in this parameter, pass the constant kAuthorizationEmptyEnvironment.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.InitWithFlagsRightsEnvironment(Monobjc.Security.AuthorizationFlags,Monobjc.Security.AuthorizationRights,Monobjc.Security.AuthorizationEnvironment)">
            <summary>
                <para>Initializes an authorization object with the specified flags, rights, and environment.</para>
                <para>Original signature is '-(id)initWithFlags:(AuthorizationFlags)flags rights:(const AuthorizationRights *)rights environment:(const AuthorizationEnvironment *)environment'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="flags">A bit mask for specifying authorization options. Use the following option sets:Pass the constant kAuthorizationFlagDefaults if no options are necessary.Specify the kAuthorizationFlagExtendRights mask to request rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPartialRights and kAuthorizationFlagExtendRights masks to request partial rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPreAuthorize and kAuthorizationFlagExtendRights masks to preauthorize rights.Specify the kAuthorizationFlagDestroyRights mask to prevent the Security framework from preserving the rights obtained during this call.</param>
            <param name="rights">A pointer to a set of authorization rights you create. Pass NULL if the application requires no rights at this time.</param>
            <param name="environment">Data used when authorizing or preauthorizing rights. In Mac OS X v10.3 and later, you can pass icon or prompt data to be used in the authentication dialog box. Possible values for this parameter are listed in Security/AuthorizationTags.h. If you are not passing any data in this parameter, pass the constant kAuthorizationEmptyEnvironment.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.InvalidateCredentials">
            <summary>
                <para>Prevents any rights that were obtained by this object from being preserved.</para>
                <para>Original signature is '-(void)invalidateCredentials'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.PermitWithRightFlags(System.String,Monobjc.Security.AuthorizationFlags)">
            <summary>
                <para>Authorizes and preauthorizes one specific right.</para>
                <para>Original signature is '-(OSStatus)permitWithRight:(AuthorizationString)rightName flags:(AuthorizationFlags)flags'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="rightName">The name of an authorization right.</param>
            <param name="flags">A bit mask for specifying authorization options. See permitWithRights:flags:environment:authorizedRights for details about possible flag values.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.PermitWithRightsFlagsEnvironmentAuthorizedRights(Monobjc.Security.AuthorizationRights,Monobjc.Security.AuthorizationFlags,Monobjc.Security.AuthorizationEnvironment,Monobjc.Security.AuthorizationRights@)">
            <summary>
                <para>Authorizes and preauthorizes rights to access a privileged operation and returns the granted rights.</para>
                <para>Original signature is '-(OSStatus)permitWithRights:(const AuthorizationRights *)rights flags:(AuthorizationFlags)flags environment:(const AuthorizationEnvironment *)environment authorizedRights:(AuthorizationRights **)authorizedRights'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="rights">A pointer to a set of authorization rights you create. Pass NULL if the application requires no rights at this time.</param>
            <param name="flags">A bit mask for specifying authorization options. Use the following option sets:Pass the constant kAuthorizationFlagDefaults if no options are necessary.Specify the kAuthorizationFlagExtendRights mask to request rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPartialRights and kAuthorizationFlagExtendRights masks to request partial rights. You can also specify the kAuthorizationFlagInteractionAllowed mask to allow user interaction.Specify the kAuthorizationFlagPreAuthorize and kAuthorizationFlagExtendRights masks to preauthorize rights.Specify the kAuthorizationFlagDestroyRights mask to prevent the Security framework from preserving the rights obtained during this call.</param>
            <param name="environment">Data used when authorizing or preauthorizing rights. In Mac OS X v10.3 and later, you can pass icon or prompt data to be used in the authentication dialog box. Possible values for this parameter are listed in Security/AuthorizationTags.h. If you are not passing any data in this parameter, pass the constant kAuthorizationEmptyEnvironment.</param>
            <param name="authorizedRights">A pointer to a newly allocated AuthorizationRights structure. On return, this structure contains the rights granted by the Security framework. If you do not require this information, pass NULL. If you specify the kAuthorizationFlagPreAuthorize mask in the flags parameter, the method returns all the requested rights, including those not granted, but the flags of the rights that could not be preauthorized include the kAuthorizationFlagCanNotPreAuthorize bit.Free the memory associated with this set of rights by calling the Authorization Services function AuthorizationFreeItemSet.This parameter is not supported in Mac OS X v10.3; use the Authorization Services function AuthorizationCopyRights instead. In Mac OS X v10.3 there is an error in the signature in the header file for this parameter. If you pass this argument as (AuthorizationRights **)authorizedRights, as shown in this document, it works as described.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.EncodeWithCoder(Monobjc.Cocoa.NSCoder)">
            <summary>
            Encodes the receiver using a given archiver.
            </summary>
            <param name="encoder">An archiver object.</param>
            <returns>self, initialized using the data in decoder.</returns>
            <remarks>Original signature is '- (void)encodeWithCoder:(NSCoder *)encoder'</remarks>
        </member>
        <member name="M:Monobjc.Security.SFAuthorization.InitWithCoder(Monobjc.Cocoa.NSCoder)">
            <summary>
            Returns an object initialized from data in a given unarchiver.
            </summary>
            <param name="decoder">An unarchiver object.</param>
            <returns>self, initialized using the data in decoder.</returns>
            <remarks>Original signature is '- (id)initWithCoder:(NSCoder *)decoder'</remarks>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationPluginView">
            <summary>
            Managed wrapper for SFAuthorizationPluginView Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Returns an SFAuthorizationPluginView object with the specified callbacks and authorization engine handle.</para>
                <para>Original signature is '- (id)initWithCallbacks:(const AuthorizationCallbacks *)callbacks andEngineRef:(AuthorizationEngineRef)engineRef'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationPluginView" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationPluginView" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationPluginView" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationPluginView.SFAuthorizationPluginViewClass">
            <summary>
            Static field for a quick access to the SFAuthorizationPluginView class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationPluginView.Callbacks">
            <summary>
                <para>Returns the AuthorizationCallbacks structure with which this instance was initialized.</para>
                <para>Original signature is '- (const AuthorizationCallbacks *)callbacks'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationPluginView.EngineRef">
            <summary>
                <para>Returns the authorization engine handle with which this instance was initialized.</para>
                <para>Original signature is '- (AuthorizationEngineRef)engineRef'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationPluginView.FirstKeyView">
            <summary>
                <para>Returns the first view in the keyboard loop of the view.</para>
                <para>Original signature is '- (NSView *)firstKeyView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationPluginView.FirstResponderView">
            <summary>
                <para>Returns the view that should get focus for keyboard events.</para>
                <para>Original signature is '- (NSView *)firstResponderView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationPluginView.LastKeyView">
            <summary>
                <para>Returns the last view in the keyboard loop of the view.</para>
                <para>Original signature is '- (NSView *)lastKeyView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.ButtonPressed(Monobjc.Security.SFButtonType)">
            <summary>
                <para>Informs the SFAuthorizationPluginView instance when a user presses a button in the custom view.</para>
                <para>Original signature is '- (void)buttonPressed:(SFButtonType) inButtonType'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="inButtonType">The type of button that was pressed.</param>
            <returns>An object of type AuthorizationCallbacks.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.DidActivate">
            <summary>
                <para>Informs the SFAuthorizationPluginView instance when the authorization plug-in makes the instance’s user interface active.</para>
                <para>Original signature is '- (void)didActivate'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <returns>A handle of type AuthorizationEngineRef.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.DidDeactivate">
            <summary>
                <para>Informs the SFAuthorizationPluginView instance when the authorization plug-in deactivates its user interface.</para>
                <para>Original signature is '- (void)didDeactivate'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <returns>A handle of type AuthorizationEngineRef.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.DisplayView">
            <summary>
                <para>Displays the user interface provided by the SFAuthorizationPluginView subclass.</para>
                <para>Original signature is '- (void)displayView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <returns>A handle of type AuthorizationEngineRef.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.InitWithCallbacksAndEngineRef(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Returns an SFAuthorizationPluginView object with the specified callbacks and authorization engine handle.</para>
                <para>Original signature is '- (id)initWithCallbacks:(const AuthorizationCallbacks *)callbacks andEngineRef:(AuthorizationEngineRef)engineRef'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="callbacks">The structure of type AuthorizationCallbacks provided to the authorization plug-in in its AuthorizationPluginCreate function.</param>
            <param name="engineRef">The handle of type AuthorizationEngineRef provided to the authorization plug-in in its MechanismCreate function.</param>
            <returns>An initialized SFAuthorizationPluginView instance.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.SetButtonEnabled(Monobjc.Security.SFButtonType,System.Boolean)">
            <summary>
                <para>Enables or disables a button in the SFAuthorizationPluginView instance’s user interface.</para>
                <para>Original signature is '- (void)setButton:(SFButtonType) inButtonType enabled:(BOOL)inEnabled'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="inButtonType">The type of the button.</param>
            <param name="inEnabled">YES to enable the button, NO to disable the button.</param>
            <returns>An NSView object representing either a credentials view or an identity and credentials view.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.SetEnabled(System.Boolean)">
            <summary>
                <para>Enables or disables the controls in the SFAuthorizationPluginView instance’s view.</para>
                <para>Original signature is '- (void)setEnabled:(BOOL)inEnabled'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="inEnabled">The state the controls should be in.</param>
            <returns>An NSView object representing either a credentials view or an identity and credentials view.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.UpdateView">
            <summary>
                <para>Tells the authorization plug-in to get and display the appropriate view in the SFAuthorizationPluginView instance’s user interface.</para>
                <para>Original signature is '- (void)updateView'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <returns>An NSView object representing either a credentials view or an identity and credentials view.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.ViewForType(Monobjc.Security.SFViewType)">
            <summary>
                <para>Returns the appropriate NSView object for the specified SFViewType.</para>
                <para>Original signature is '- (NSView *)viewForType:(SFViewType) inType'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="inType">The type of view being requested by the authorization plug-in.</param>
            <returns>An NSView object representing either a credentials view or an identity and credentials view.</returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationPluginView.WillActivateWithUser(Monobjc.Cocoa.NSDictionary)">
            <summary>
                <para>Informs the SFAuthorizationPluginView instance when its user interface is about to be made active by the Apple-provided Security Agent.</para>
                <para>Original signature is '- (void)willActivateWithUser:(NSDictionary *)inUserInformation'</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
            <param name="inUserInformation">A dictionary that contains the following information:kSFAuthorizationPluginViewUserNameKeyAn NSString object containing the selected user’s namekSFAuthorizationPluginViewUserShortNameKeyAn NSString object containing the selected user’s short nameNote: inUserInformation may be nil.</param>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView">
            <summary>
            Managed wrapper for SFAuthorizationView Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.#ctor(Monobjc.Cocoa.NSRect)">
            <summary>
                <para>Initializes and returns a newly allocated NSView object with a specified frame rectangle.</para>
                <para>Original signature is '- (id)initWithFrame:(NSRect)frameRect'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationView" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationView" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationView" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher">
            <summary>
            Inner event handler that is exposed to the Objective-C runtime and relays delegate messages to listeners.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.SFAuthorizationViewEventDispatcherClass">
            <summary>
            Static field for a quick access to the SFAuthorizationViewEventDispatcher class.
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewCreatedAuthorization">
            <summary>
                <para>Sent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization for a new authorization object.</para>
                <para>Original signature is '-(void)authorizationViewCreatedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewDidAuthorize">
            <summary>
                <para>Sent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.</para>
                <para>Original signature is '-(void)authorizationViewDidAuthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewDidDeauthorize">
            <summary>
                <para>Sent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.</para>
                <para>Original signature is '-(void)authorizationViewDidDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 or later.</para>
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewReleasedAuthorization">
            <summary>
                <para>Sent to the delegate to indicate that deauthorization is about to occur.</para>
                <para>Original signature is '-(void)authorizationViewReleasedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewShouldDeauthorize">
            <summary>
                <para>Sent to the delegate when a user clicks the open lock icon.</para>
                <para>Original signature is '-(BOOL)authorizationViewShouldDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.RespondsToSelector(System.IntPtr)">
            <summary>
                <para>Returns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.</para>
                <para>Original signature is '- (BOOL)respondsToSelector:(SEL)aSelector'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
            <param name="aSelector">A selector that identifies a message.</param>
            <returns>
            YES if the receiver implements or inherits a method that can respond to aSelector, otherwise NO.
            </returns>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewCreatedAuthorizationMessage(Monobjc.Security.SFAuthorizationView)">
            <summary>
                <para>Sent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization for a new authorization object.</para>
                <para>Original signature is '-(void)authorizationViewCreatedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewDidAuthorizeMessage(Monobjc.Security.SFAuthorizationView)">
            <summary>
                <para>Sent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.</para>
                <para>Original signature is '-(void)authorizationViewDidAuthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewDidDeauthorizeMessage(Monobjc.Security.SFAuthorizationView)">
            <summary>
                <para>Sent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.</para>
                <para>Original signature is '-(void)authorizationViewDidDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 or later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewReleasedAuthorizationMessage(Monobjc.Security.SFAuthorizationView)">
            <summary>
                <para>Sent to the delegate to indicate that deauthorization is about to occur.</para>
                <para>Original signature is '-(void)authorizationViewReleasedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.AuthorizationViewShouldDeauthorizeMessage(Monobjc.Security.SFAuthorizationView)">
            <summary>
                <para>Sent to the delegate when a user clicks the open lock icon.</para>
                <para>Original signature is '-(BOOL)authorizationViewShouldDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher.Dealloc">
            <summary>
            Deallocates the memory occupied by the receiver.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.AuthorizationViewCreatedAuthorizationEventHandler">
            <summary>
                <para>Sent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization for a new authorization object.</para>
                <para>Original signature is '-(void)authorizationViewCreatedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.AuthorizationViewDidAuthorizeEventHandler">
            <summary>
                <para>Sent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.</para>
                <para>Original signature is '-(void)authorizationViewDidAuthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.AuthorizationViewDidDeauthorizeEventHandler">
            <summary>
                <para>Sent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.</para>
                <para>Original signature is '-(void)authorizationViewDidDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 or later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.AuthorizationViewReleasedAuthorizationEventHandler">
            <summary>
                <para>Sent to the delegate to indicate that deauthorization is about to occur.</para>
                <para>Original signature is '-(void)authorizationViewReleasedAuthorization:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationView.AuthorizationViewShouldDeauthorizeEventHandler">
            <summary>
                <para>Sent to the delegate when a user clicks the open lock icon.</para>
                <para>Original signature is '-(BOOL)authorizationViewShouldDeauthorize:(SFAuthorizationView *)view'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationView.SFAuthorizationViewClass">
            <summary>
            Static field for a quick access to the SFAuthorizationView class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationView.Authorization">
            <summary>
                <para>Returns the authorization object associated with this view.</para>
                <para>Original signature is '-(SFAuthorization *)authorization'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationView.AuthorizationRights">
            <summary>
                <para>Returns the authorization rights for this view.</para>
                <para>Original signature is '-(AuthorizationRights *)authorizationRights'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationView.AuthorizationState">
            <summary>
                <para>Returns the current state of the authorization view.</para>
                <para>Original signature is '-(SFAuthorizationViewState)authorizationState'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationView.Delegate">
            <summary>
                <para>Returns the delegate for this view.</para>
                <para>Original signature is '-(id)delegate'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFAuthorizationView.IsEnabled">
            <summary>
                <para>Indicates whether the authorization view is enabled (YES) or disabled (NO).</para>
                <para>Original signature is '-(BOOL)isEnabled'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.Authorize(Monobjc.Id)">
            <summary>
                <para>Attempts to unlock the lock icon in the view.</para>
                <para>Original signature is '-(BOOL)authorize:(id)inSender'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="inSender">The authorization view to unlock.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.Deauthorize(Monobjc.Id)">
            <summary>
                <para>Sets the authorization state to unauthorized and locks the lock icon in the view.</para>
                <para>Original signature is '-(BOOL)deauthorize:(id)inSender'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="inSender">The authorization view to lock.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SetAutoupdate(System.Boolean)">
            <summary>
                <para>Sets the authorization view to update itself automatically.</para>
                <para>Original signature is '-(void)setAutoupdate:(BOOL)autoupdate'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="autoupdate">Specifies whether the authorization view should update itself automatically. Set to YES to enable autoupdates.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SetAutoupdateInterval(System.Boolean,System.Double)">
            <summary>
                <para>Sets the authorization view to update itself at a specific interval.</para>
                <para>Original signature is '-(void)setAutoupdate:(BOOL)autoupdate interval:(NSTimeInterval)interval'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="autoupdate">Specifies whether the authorization view should update itself automatically. Set to YES to enable autoupdates.</param>
            <param name="interval">If autoupdate is YES, sets the interval at which updates take place, in seconds.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SetFlags(Monobjc.Security.AuthorizationFlags)">
            <summary>
                <para>Sets the current authorization flags for the view.</para>
                <para>Original signature is '-(void)setFlags:(AuthorizationFlags)flags'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="flags">The authorization flags to set for this view.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SetString(System.String)">
            <summary>
                <para>Sets the requested-right string to use with the default authorization rights set.</para>
                <para>Original signature is '-(void)setString:(AuthorizationString)authorizationString'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="authorizationString">The string to be displayed.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.UpdateStatus(Monobjc.Id)">
            <summary>
                <para>Manually updates the authorization view.</para>
                <para>Original signature is '-(BOOL)updateStatus:(id)inSender'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="inSender">The authorization view to update.</param>
        </member>
        <member name="M:Monobjc.Security.SFAuthorizationView.SetDelegate(System.Action{Monobjc.Security.SFAuthorizationView.SFAuthorizationViewEventDispatcher})">
            <summary>
            Sets the delegate of the <see cref="T:Monobjc.Security.SFAuthorizationView" /> instance.
            </summary>
            <param name="assignment">The assignment of delegation methods.</param>
        </member>
        <member name="T:Monobjc.Security.SFAuthorizationViewState">
            <summary>
            Defines the current state of the authorization view.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationViewState.SFAuthorizationStartupState">
            <summary>
                <para>Indicates the state is starting up.</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationViewState.SFAuthorizationViewLockedState">
            <summary>
                <para>Indicates the state is locked.</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationViewState.SFAuthorizationViewInProgressState">
            <summary>
                <para>Indicates the state is in progress.</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFAuthorizationViewState.SFAuthorizationViewUnlockedState">
            <summary>
                <para>Indicates the state is unlocked.</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFButtonType">
            <summary>
            These constants define the button types used by authorization plug-ins.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFButtonType.SFButtonTypeCancel">
            <summary>
                <para>Indicates the Cancel button was pressed.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFButtonType.SFButtonTypeOK">
            <summary>
                <para>Indicates the OK button was pressed.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFButtonType.SFButtonTypeBack">
            <summary>
                <para>Indicates the Back button was pressed.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFButtonType.SFButtonTypeLogin">
            <summary>
                <para>Indicates the Login button was pressed.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFCertificatePanel">
            <summary>
            Managed wrapper for SFCertificatePanel Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean)">
            <summary>
                <para>Initializes the receiver, an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean,Monobjc.Cocoa.NSScreen)">
            <summary>
                <para>Initializes an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation screen:(NSScreen *)screen'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher">
            <summary>
            Inner event handler that is exposed to the Objective-C runtime and relays delegate messages to listeners.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="F:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.SFCertificatePanelEventDispatcherClass">
            <summary>
            Static field for a quick access to the SFCertificatePanelEventDispatcher class.
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.CertificatePanelShowHelp">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)certificatePanelShowHelp:(SFCertificatePanel *)sender'</para>
                <para>Mac OS X v10.4</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.RespondsToSelector(System.IntPtr)">
            <summary>
                <para>Returns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.</para>
                <para>Original signature is '- (BOOL)respondsToSelector:(SEL)aSelector'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
            <param name="aSelector">A selector that identifies a message.</param>
            <returns>
            YES if the receiver implements or inherits a method that can respond to aSelector, otherwise NO.
            </returns>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.CertificatePanelShowHelpMessage(Monobjc.Security.SFCertificatePanel)">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)certificatePanelShowHelp:(SFCertificatePanel *)sender'</para>
                <para>Mac OS X v10.4</para>
            </summary>
            <param name="sender">The certificate panel for which to implement custom help.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher.Dealloc">
            <summary>
            Deallocates the memory occupied by the receiver.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher">
            <summary>
            Dispatcher to connect .NET delegate to Objective-C event selector.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="E:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher.PanelDidEnd">
            <summary>
            Occurs when the save panel ends.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SFCertificatePanelSheetDispatcher.PanelDidEndReturnCodeContextInfo(Monobjc.Security.SFCertificatePanel,System.Int32,System.IntPtr)">
            <summary>
            Callback method to dispatch message.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFCertificatePanel.CertificatePanelShowHelpEventHandler">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)certificatePanelShowHelp:(SFCertificatePanel *)sender'</para>
                <para>Mac OS X v10.4</para>
            </summary>
            <param name="sender">The certificate panel for which to implement custom help.</param>
        </member>
        <member name="F:Monobjc.Security.SFCertificatePanel.SFCertificatePanelClass">
            <summary>
            Static field for a quick access to the SFCertificatePanel class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificatePanel.SharedCertificatePanel">
            <summary>
                <para>Returns a shared certificate panel object. If the object has not already been created, this method allocates and initializes the object first.</para>
                <para>Original signature is '+(SFCertificatePanel *)sharedCertificatePanel'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificatePanel.HelpAnchor">
            <summary>
                <para>Returns the current help anchor string for the sheet or panel.</para>
                <para>Original signature is '-(NSString *)helpAnchor'</para>
                <para>Mac OS X v10.4</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificatePanel.Policies">
            <summary>
                <para>Returns an array of policies used to evaluate the status of the displayed certificates.</para>
                <para>Original signature is '-(NSArray *)policies'</para>
                <para>Mac OS X v10.4</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificatePanel.ShowsHelp">
            <summary>
                <para>Indicates whether the help button is currently set to be displayed.</para>
                <para>Original signature is '-(BOOL)showsHelp'</para>
                <para>Mac OS X v10.4</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoCertificatesShowGroup(Monobjc.Cocoa.NSWindow,Monobjc.Id,System.IntPtr,System.IntPtr,Monobjc.Cocoa.NSArray,System.Boolean)">
            <summary>
                <para>Displays one or more certificates in a modal sheet.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo certificates:(NSArray *)certificates showGroup:(BOOL)showGroup'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="dlgt">The delegate object in which the method specified in the didEndSelector parameter is implemented.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="certificates">The certificates to display. Pass an NSArray containing one or more objects of type SecCertificateRef in this parameter. The first certificate in the array must be the leaf certificate. The other certificates (if any) can be included in any order.</param>
            <param name="showGroup">Specifies whether additional certificates (other than the leaf certificate) are displayed.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.RunModalForCertificatesShowGroup(Monobjc.Cocoa.NSArray,System.Boolean)">
            <summary>
                <para>Displays one or more specified certificates in a modal panel.</para>
                <para>Original signature is '-(int)runModalForCertificates:(NSArray *)certificates showGroup:(BOOL)showGroup'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="certificates">The certificates to display. Pass an NSArray containing one or more objects of type SecCertificateRef in this parameter. The first certificate in the array must be the leaf certificate. The other certificates (if any) can be included in any order.</param>
            <param name="showGroup">Specifies whether additional certificates (other than the leaf certificate) are displayed. To show only a single certificate, specify only one SecCertificateRef in the array and set showGroup to NO.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SetAlternateButtonTitle(Monobjc.Cocoa.NSString)">
            <summary>
                <para>Customizes the title of the alternate button.</para>
                <para>Original signature is '-(void)setAlternateButtonTitle:(NSString *)title'</para>
                <para>Mac OS X v10.4</para>
            </summary>
            <param name="title">The new title for the alternate button. If this method is not called, or if title is set to nil, the button is not shown.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SetDefaultButtonTitle(Monobjc.Cocoa.NSString)">
            <summary>
                <para>Customizes the title of the default button.</para>
                <para>Original signature is '-(void)setDefaultButtonTitle:(NSString *)title'</para>
                <para>Mac OS X v10.4</para>
            </summary>
            <param name="title">The new title for the default button. The default title for this button is “OK”.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.SetDelegate(System.Action{Monobjc.Security.SFCertificatePanel.SFCertificatePanelEventDispatcher})">
            <summary>
            Sets the delegate of the <see cref="T:Monobjc.Security.SFCertificatePanel" /> instance.
            </summary>
            <param name="assignment">The assignment of delegation methods.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificatePanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoCertificatesShowGroup(Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFCertificatePanel},System.IntPtr,Monobjc.Cocoa.NSArray,System.Boolean)">
            <summary>
            Displays one or more certificates in a modal sheet.
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="certificates">The certificates to display. Pass an NSArray containing one or more objects of type SecCertificateRef in this parameter. The first certificate in the array must be the leaf certificate. The other certificates (if any) can be included in any order.</param>
            <param name="showGroup">Specifies whether additional certificates (other than the leaf certificate) are displayed.</param>
            <remarks>Original signature is '-�(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo certificates:(NSArray *)certificates showGroup:(BOOL)showGroup'</remarks>
        </member>
        <member name="T:Monobjc.Security.SFCertificateTrustPanel">
            <summary>
            Managed wrapper for SFCertificateTrustPanel Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean,Monobjc.Cocoa.NSScreen)">
            <summary>
                <para>Initializes an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation screen:(NSScreen *)screen'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean)">
            <summary>
                <para>Initializes the receiver, an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateTrustPanel" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateTrustPanel" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateTrustPanel" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher">
            <summary>
            Dispatcher to connect .NET delegate to Objective-C event selector.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="E:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher.PanelDidEnd">
            <summary>
            Occurs when the save panel ends.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelSheetDispatcher.PanelDidEndReturnCodeContextInfo(Monobjc.Security.SFCertificateTrustPanel,System.Int32,System.IntPtr)">
            <summary>
            Callback method to dispatch message.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFCertificateTrustPanel.SFCertificateTrustPanelClass">
            <summary>
            Static field for a quick access to the SFCertificateTrustPanel class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateTrustPanel.SharedCertificateTrustPanel">
            <summary>
                <para>Returns a shared certificate trust panel object. If the object has not already been created, this method allocates and initializes the object first.</para>
                <para>Original signature is '+(SFCertificateTrustPanel *)sharedCertificateTrustPanel'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoTrustMessage(Monobjc.Cocoa.NSWindow,Monobjc.Id,System.IntPtr,System.IntPtr,System.IntPtr,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a modal sheet that shows the results of a certificate trust evaluation and that allows the user to edit trust settings.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo trust:(SecTrustRef)trust message:(NSString *)message'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="dlgt">The delegate object in which the method specified in the didEndSelector parameter is implemented.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="trust">A trust management object. Use the SecTrustCreateWithCertificates function (in Security/SecTrust.h) to create the trust management object.</param>
            <param name="message">A message string to display in the sheet.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.RunModalForTrustMessage(System.IntPtr,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a modal panel that shows the results of a certificate trust evaluation and that allows the user to edit trust settings.</para>
                <para>Original signature is '-(int)runModalForTrust:(SecTrustRef)trust message:(NSString *)message'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="trust">A trust management object. Use the SecTrustCreateWithCertificates function (in Security/SecTrust.h) to create the trust management object.</param>
            <param name="message">A message string to display in the panel.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoCertificatesShowGroup(Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFCertificateTrustPanel},System.IntPtr,Monobjc.Cocoa.NSArray,System.Boolean)">
            <summary>
            Displays one or more certificates in a modal sheet.
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="certificates">The certificates to display. Pass an NSArray containing one or more objects of type SecCertificateRef in this parameter. The first certificate in the array must be the leaf certificate. The other certificates (if any) can be included in any order.</param>
            <param name="showGroup">Specifies whether additional certificates (other than the leaf certificate) are displayed.</param>
            <remarks>Original signature is '-�(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo certificates:(NSArray *)certificates showGroup:(BOOL)showGroup'</remarks>
        </member>
        <member name="M:Monobjc.Security.SFCertificateTrustPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoTrustMessage(Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFCertificateTrustPanel},System.IntPtr,System.IntPtr,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a modal sheet that shows the results of a certificate trust evaluation and that allows the user to edit trust settings.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo trust:(SecTrustRef)trust message:(NSString *)message'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="trust">A trust management object. Use the SecTrustCreateWithCertificates function (in Security/SecTrust.h) to create the trust management object.</param>
            <param name="message">A message string to display in the sheet.</param>
        </member>
        <member name="T:Monobjc.Security.SFCertificateView">
            <summary>
            Managed wrapper for SFCertificateView Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.#ctor(Monobjc.Cocoa.NSRect)">
            <summary>
                <para>Initializes and returns a newly allocated NSView object with a specified frame rectangle.</para>
                <para>Original signature is '- (id)initWithFrame:(NSRect)frameRect'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateView" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateView" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFCertificateView" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="F:Monobjc.Security.SFCertificateView.SFCertificateViewClass">
            <summary>
            Static field for a quick access to the SFCertificateView class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateView.Certificate">
            <summary>
                <para>Returns the certificate currently displayed in the view.</para>
                <para>Original signature is '-(SecCertificateRef)certificate'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateView.DetailsDisplayed">
            <summary>
                <para>Indicates if the view currently shows the certificate’s details.</para>
                <para>Original signature is '-(BOOL)detailsDisplayed'</para>
                <para>Available in Mac OS X v10.4 and later</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateView.IsEditable">
            <summary>
                <para>Indicates if the view allows the user to edit the certificate’s trust.</para>
                <para>Original signature is '-(BOOL)isEditable'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateView.IsTrustDisplayed">
            <summary>
                <para>Indicates if the view currently shows the certificate’s trust settings.</para>
                <para>Original signature is '-(BOOL)isTrustDisplayed'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFCertificateView.Policies">
            <summary>
                <para>Returns an array of policies used to evaluate the status of the displayed certificate.</para>
                <para>Original signature is '-(NSArray *)policies'</para>
                <para>Available in Mac OS X v10.4 and later</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.SaveTrustSettings">
            <summary>
                <para>Saves the user’s current trust settings for the displayed certificate.</para>
                <para>Original signature is '-(void)saveTrustSettings'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.SetDisplayDetails(System.Boolean)">
            <summary>
                <para>Specifies whether the user can see the certificate details.</para>
                <para>Original signature is '-(void)setDisplayDetails:(BOOL)display'</para>
                <para>Available in Mac OS X v10.4 and later</para>
            </summary>
            <param name="display">Pass YES to display the certificate details, or NO to hide them.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.SetDisplayTrust(System.Boolean)">
            <summary>
                <para>Specifies whether the user can see the certificate’s trust settings.</para>
                <para>Original signature is '-(void)setDisplayTrust:(BOOL)display'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="display">Pass YES to display the trust settings, or NO to hide them.</param>
        </member>
        <member name="M:Monobjc.Security.SFCertificateView.SetEditableTrust(System.Boolean)">
            <summary>
                <para>Specifies whether the user can edit the certificate’s trust settings.</para>
                <para>Original signature is '-(void)setEditableTrust:(BOOL)editable'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="editable">Pass YES if the trust settings should be editable.</param>
        </member>
        <member name="T:Monobjc.Security.SFChooseIdentityPanel">
            <summary>
            Managed wrapper for SFChooseIdentityPanel Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean)">
            <summary>
                <para>Initializes the receiver, an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean,Monobjc.Cocoa.NSScreen)">
            <summary>
                <para>Initializes an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation screen:(NSScreen *)screen'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher">
            <summary>
            Inner event handler that is exposed to the Objective-C runtime and relays delegate messages to listeners.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="F:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.SFChooseIdentityPanelEventDispatcherClass">
            <summary>
            Static field for a quick access to the SFChooseIdentityPanelEventDispatcher class.
            </summary>
        </member>
        <member name="E:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.ChooseIdentityPanelShowHelp">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)chooseIdentityPanelShowHelp:(SFChooseIdentityPanel *)sender'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.RespondsToSelector(System.IntPtr)">
            <summary>
                <para>Returns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.</para>
                <para>Original signature is '- (BOOL)respondsToSelector:(SEL)aSelector'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
            <param name="aSelector">A selector that identifies a message.</param>
            <returns>
            YES if the receiver implements or inherits a method that can respond to aSelector, otherwise NO.
            </returns>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.ChooseIdentityPanelShowHelpMessage(Monobjc.Security.SFChooseIdentityPanel)">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)chooseIdentityPanelShowHelp:(SFChooseIdentityPanel *)sender'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
            <param name="sender">The choose identity panel for which to implement custom help.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher.Dealloc">
            <summary>
            Deallocates the memory occupied by the receiver.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher">
            <summary>
            Dispatcher to connect .NET delegate to Objective-C event selector.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="E:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher.PanelDidEnd">
            <summary>
            Occurs when the save panel ends.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelSheetDispatcher.PanelDidEndReturnCodeContextInfo(Monobjc.Security.SFChooseIdentityPanel,System.Int32,System.IntPtr)">
            <summary>
            Callback method to dispatch message.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SFChooseIdentityPanel.ChooseIdentityPanelShowHelpEventHandler">
            <summary>
                <para>Implements custom help behavior for the modal panel.</para>
                <para>Original signature is '-(BOOL)chooseIdentityPanelShowHelp:(SFChooseIdentityPanel *)sender'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
            <param name="sender">The choose identity panel for which to implement custom help.</param>
        </member>
        <member name="F:Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelClass">
            <summary>
            Static field for a quick access to the SFChooseIdentityPanel class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFChooseIdentityPanel.SharedChooseIdentityPanel">
            <summary>
                <para>Returns a shared choose identity panel object. If the object has not already been created, this method allocates and initializes the object first.</para>
                <para>Original signature is '+(SFChooseIdentityPanel *)sharedChooseIdentityPanel'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFChooseIdentityPanel.HelpAnchor">
            <summary>
                <para>Returns the current help anchor string for the sheet or panel.</para>
                <para>Original signature is '-(NSString *)helpAnchor'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFChooseIdentityPanel.Identity">
            <summary>
                <para>Returns the identity that the user chose in the panel or sheet.</para>
                <para>Original signature is '-(SecIdentityRef)identity'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFChooseIdentityPanel.Policies">
            <summary>
                <para>Returns an array of policies used to evaluate the status of the displayed certificates.</para>
                <para>Original signature is '-(NSArray *)policies'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFChooseIdentityPanel.ShowsHelp">
            <summary>
                <para>Indicates whether the help button is currently set to be displayed.</para>
                <para>Original signature is '-(BOOL)showsHelp'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoIdentitiesMessage(Monobjc.Cocoa.NSWindow,Monobjc.Id,System.IntPtr,System.IntPtr,Monobjc.Cocoa.NSArray,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a list of identities in a modal sheet from which the user can select an identity.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo identities:(NSArray *)identities message:(NSString *)message'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="dlgt">The delegate object in which the method specified in the didEndSelector parameter is implemented.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="identities">An array of identity objects (objects of type SecIdentityRef). Use the SecIdentitySearchCopyNext function (in Security/SecIdentitySearch.h) to find identity objects.</param>
            <param name="message">A message string to display in the sheet.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.RunModalForIdentitiesMessage(Monobjc.Cocoa.NSArray,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a list of identities in a modal panel.</para>
                <para>Original signature is '-(int)runModalForIdentities:(NSArray *)identities message:(NSString *)message'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="identities">An array of identity objects (objects of type SecIdentityRef. Use the SecIdentitySearchCopyNext function (in Security/SecIdentitySearch.h) to find identity objects.</param>
            <param name="message">A message string to display in the panel.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SetAlternateButtonTitle(Monobjc.Cocoa.NSString)">
            <summary>
                <para>Customizes the title of the alternate button.</para>
                <para>Original signature is '-(void)setAlternateButtonTitle:(NSString *)title'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
            <param name="title">The new title for the alternate button. If this method is not called, or if title is set to nil, the button is not shown.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SetDefaultButtonTitle(Monobjc.Cocoa.NSString)">
            <summary>
                <para>Customizes the title of the default button.</para>
                <para>Original signature is '-(void)setDefaultButtonTitle:(NSString *)title'</para>
                <para>Available in Mac OS X v10.4 and later.</para>
            </summary>
            <param name="title">The new title for the default button. The default title for this button is “OK”.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.SetDelegate(System.Action{Monobjc.Security.SFChooseIdentityPanel.SFChooseIdentityPanelEventDispatcher})">
            <summary>
            Sets the delegate of the <see cref="T:Monobjc.Security.SFChooseIdentityPanel" /> instance.
            </summary>
            <param name="assignment">The assignment of delegation methods.</param>
        </member>
        <member name="M:Monobjc.Security.SFChooseIdentityPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoIdentitiesMessage(Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFChooseIdentityPanel},System.IntPtr,Monobjc.Cocoa.NSArray,Monobjc.Cocoa.NSString)">
            <summary>
            Displays a list of identities in a modal sheet from which the user can select an identity.
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached.</param>
            <param name="didEndSelector">A method selector for a delegate method called when the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="identities">An array of identity objects (objects of type SecIdentityRef). Use the SecIdentitySearchCopyNext function (in Security/SecIdentitySearch.h) to find identity objects.</param>
            <param name="message">A message string to display in the sheet.</param>
            <remarks>Original signature is '-�(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo identities:(NSArray *)identities message:(NSString *)message'</remarks>
        </member>
        <member name="T:Monobjc.Security.SFKeychainSavePanel">
            <summary>
            Managed wrapper for SFKeychainSavePanel Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean)">
            <summary>
                <para>Initializes the receiver, an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean,Monobjc.Cocoa.NSScreen)">
            <summary>
                <para>Initializes an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation screen:(NSScreen *)screen'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSavePanel" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSavePanel" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSavePanel" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher">
            <summary>
            Dispatcher to connect .NET delegate to Objective-C event selector.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="E:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher.PanelDidEnd">
            <summary>
            Occurs when the save panel ends.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelSheetDispatcher.PanelDidEndReturnCodeContextInfo(Monobjc.Security.SFKeychainSavePanel,System.Int32,System.IntPtr)">
            <summary>
            Callback method to dispatch message.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFKeychainSavePanel.SFKeychainSavePanelClass">
            <summary>
            Static field for a quick access to the SFKeychainSavePanel class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFKeychainSavePanel.SharedKeychainSavePanel">
            <summary>
                <para>Returns a shared keychain save panel object. If the object has not already been created, this method allocates and initializes the object first.</para>
                <para>Original signature is '+(SFKeychainSavePanel *)sharedKeychainSavePanel'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFKeychainSavePanel.Keychain">
            <summary>
                <para>Returns the keychain created by the keychain save panel.</para>
                <para>Original signature is '-(SecKeychainRef)keychain'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.BeginSheetForDirectoryFileModalForWindowModalDelegateDidEndSelectorContextInfo(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSWindow,Monobjc.Id,System.IntPtr,System.IntPtr)">
            <summary>
                <para>Displays a sheet that allows a user to create a new keychain.</para>
                <para>Original signature is '-(void)beginSheetForDirectory:(NSString *)path file:(NSString *)name modalForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="path">The path to the folder where the keychain is created. Specify nil for ~/Library/Keychains.</param>
            <param name="name">The keychain name to be automatically displayed in the Save As field of the sheet.</param>
            <param name="docWindow">The parent window to which the sheet is attached. If this parameter is nil, the behavior defaults to a standalone modal window.</param>
            <param name="dlgt">The delegate object in which the method specified in the didEndSelector parameter is implemented.</param>
            <param name="didEndSelector">A method selector for a delegate method called after the modal session has ended, but before the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.RunModalForDirectoryFile(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString)">
            <summary>
                <para>Displays a panel that allows a user to create a new keychain.</para>
                <para>Original signature is '-(int)runModalForDirectory:(NSString *)path file:(NSString *)name'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="path">The path to the folder where the keychain is created. Specify nil for ~/Library/Keychains.</param>
            <param name="name">The keychain name to be automatically displayed in the Save As field of the panel.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.SetPassword(Monobjc.Cocoa.NSString)">
            <summary>
                <para>Specifies the password for the keychain that will be created.</para>
                <para>Original signature is '-(void)setPassword:(NSString *)password'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="password">The password to be used for the new keychain.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSavePanel.BeginSheetForDirectoryFileModalForWindowModalDelegateDidEndSelectorContextInfo(Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSString,Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFKeychainSavePanel},System.IntPtr)">
            <summary>
            Presents a Save panel as a sheet with the directory specified by path and optionally, the file specified by name selected.
            </summary>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <param name="docWindow">The doc window.</param>
            <param name="didEndSelector">The did end selector.</param>
            <param name="contextInfo">The context info.</param>
            <remarks>Original signature is '- (void)beginSheetForDirectory:(NSString *)path file:(NSString *)name modalForWindow:(NSWindow *)docWindow modalDelegate:(id)modalDelegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo'</remarks>
        </member>
        <member name="T:Monobjc.Security.SFKeychainSettingsPanel">
            <summary>
            Managed wrapper for SFKeychainSettingsPanel Objective-C class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean)">
            <summary>
                <para>Initializes the receiver, an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.#ctor(Monobjc.Cocoa.NSRect,Monobjc.Cocoa.NSWindowStyleMasks,Monobjc.Cocoa.NSBackingStoreType,System.Boolean,Monobjc.Cocoa.NSScreen)">
            <summary>
                <para>Initializes an allocated NSWindow object.</para>
                <para>Original signature is '- (id)initWithContentRect:(NSRect)contentRect styleMask:( NSUInteger)windowStyle backing:(NSBackingStoreType) bufferingType defer:(BOOL)deferCreation screen:(NSScreen *)screen'</para>
                <para>Available in Mac OS X v10.0 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSettingsPanel" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSettingsPanel" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.#ctor(System.String,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSettingsPanel" /> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="firstParam">The first param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher">
            <summary>
            Dispatcher to connect .NET delegate to Objective-C event selector.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher" /> class.
            </summary>
            <param name="nativePointer">The native pointer.</param>
        </member>
        <member name="E:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher.PanelDidEnd">
            <summary>
            Occurs when the save panel ends.
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelSheetDispatcher.PanelDidEndReturnCodeContextInfo(Monobjc.Security.SFKeychainSettingsPanel,System.Int32,System.IntPtr)">
            <summary>
            Callback method to dispatch message.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFKeychainSettingsPanel.SFKeychainSettingsPanelClass">
            <summary>
            Static field for a quick access to the SFKeychainSettingsPanel class.
            </summary>
        </member>
        <member name="P:Monobjc.Security.SFKeychainSettingsPanel.SharedKeychainSettingsPanel">
            <summary>
                <para>Returns a shared keychain settings panel object. If the object has not already been created, this method allocates and initializes the object first.</para>
                <para>Original signature is '+(SFKeychainSettingsPanel *)sharedKeychainSettingsPanel'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoSettingsKeychain(Monobjc.Cocoa.NSWindow,Monobjc.Id,System.IntPtr,System.IntPtr,Monobjc.Security.SecKeychainSettings,System.IntPtr)">
            <summary>
                <para>Displays a sheet that allows users to change keychain settings.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo settings:(SecKeychainSettings *)settings keychain:(SecKeychainRef)keychain'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached. If this parameter is nil, the behavior defaults to a standalone modal window.</param>
            <param name="dlgt">The delegate object in which the method specified in the didEndSelector parameter is implemented.</param>
            <param name="didEndSelector">A method selector for a delegate method called after the modal session has ended, but before the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="settings">A pointer to a keychain settings structure. Because this structure is versioned, you must preallocate it and fill in the version of the structure.</param>
            <param name="keychain">The keychain whose settings you wish to have the user change.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.RunModalForSettingsKeychain(Monobjc.Security.SecKeychainSettings,System.IntPtr)">
            <summary>
                <para>Displays a panel that allows users to change keychain settings.</para>
                <para>Original signature is '-(int)runModalForSettings:(SecKeychainSettings *)settings keychain:(SecKeychainRef)keychain'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="settings">A pointer to a keychain settngs structure. Because this structure is versioned, you must preallocate it and fill in the version of the structure.</param>
            <param name="keychain">The keychain whose settings you wish to have the user change.</param>
        </member>
        <member name="M:Monobjc.Security.SFKeychainSettingsPanel.BeginSheetForWindowModalDelegateDidEndSelectorContextInfoSettingsKeychain(Monobjc.Cocoa.NSWindow,Monobjc.Cocoa.SheetDidEndReturnCodeContextInfoEventHandler{Monobjc.Security.SFKeychainSettingsPanel},System.IntPtr,Monobjc.Security.SecKeychainSettings,System.IntPtr)">
            <summary>
                <para>Displays a sheet that allows users to change keychain settings.</para>
                <para>Original signature is '-(void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo settings:(SecKeychainSettings *)settings keychain:(SecKeychainRef)keychain'</para>
                <para>Available in Mac OS X v10.3 and later.</para>
            </summary>
            <param name="docWindow">The parent window to which the sheet is attached. If this parameter is nil, the behavior defaults to a standalone modal window.</param>
            <param name="didEndSelector">A method selector for a delegate method called after the modal session has ended, but before the sheet has been dismissed. Implementation of this delegate method is optional.</param>
            <param name="contextInfo">A pointer to data that is passed to the delegate method. You can use this data pointer for any purpose you wish.</param>
            <param name="settings">A pointer to a keychain settings structure. Because this structure is versioned, you must preallocate it and fill in the version of the structure.</param>
            <param name="keychain">The keychain whose settings you wish to have the user change.</param>
        </member>
        <member name="T:Monobjc.Security.SFViewType">
            <summary>
            These constants define the view type requested by the authorization plug-in.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFViewType.SFViewTypeIdentityAndCredentials">
            <summary>
                <para>Indicates a view that contains controls for identity and credentials was requested by the authorization plug-in.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Security.SFViewType.SFViewTypeCredentials">
            <summary>
                <para>Indicates a view that contains controls for credentials was requested by the authorization plug-in.</para>
                <para>Available in Mac OS X v10.5 and later.</para>
            </summary>
        </member>
        <member name="T:Monobjc.Security.SecKeychainSettings">
            <summary>
            Contains information about keychain settings.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SecKeychainSettings.version">
            <summary>
            An unsigned 32-bit integer representing the keychain version.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SecKeychainSettings.lockOnSleep">
            <summary>
            A Boolean value indicating whether the keychain locks when the system sleeps.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SecKeychainSettings.useLockInterval">
            <summary>
            A Boolean value indicating whether the keychain automatically locks after a certain period of time.
            </summary>
        </member>
        <member name="F:Monobjc.Security.SecKeychainSettings.lockInterval">
            <summary>
            An unsigned 32-bit integer representing the number of seconds before the keychain locks. If you set useLockInterval to FALSE, set lockInterval to INT_MAX to indicate that the keychain never locks.
            </summary>
        </member>
        <member name="T:Monobjc.Security.SecurityFramework">
            <summary>
            Utility class to access Security framework.
            </summary>
        </member>
    </members>
</doc>
